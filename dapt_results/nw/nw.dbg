
#######################################################################

#oryginal loop:

#schedule:
{ domain: "[N] -> { S_13[]; S_10[i, j] : 0 < i <= N and 0 < j <= N; S_7[i, j] : 0 < i <= N and 0 < j <= N; S_11[i, j] : 0 < i <= N and 0 < j <= N; S_5[i, j, k] : i <= N and 0 < j <= N and 0 < k <= i; S_14[]; S_6[i, j] : 0 < i <= N and 0 < j <= N; S_3[i, j] : 0 < i <= N and 0 < j <= N; S_15[]; S_9[i, j, k] : 0 < i <= N and j <= N and 0 < k <= j; S_1[i] : 0 < i <= N; S_0[]; S_12[i] : 0 < i <= N; S_2[i, j] : 0 < i <= N and 0 < j <= N; S_8[i, j, k] : 0 < i <= N and j <= N and 0 < k <= j; S_4[i, j, k] : i <= N and 0 < j <= N and 0 < k <= i }", child: { sequence: [ { filter: "[N] -> { S_0[] }" }, { filter: "[N] -> { S_4[i, j, k]; S_10[i, j]; S_7[i, j]; S_5[i, j, k]; S_6[i, j]; S_3[i, j]; S_9[i, j, k]; S_1[i]; S_12[i]; S_2[i, j]; S_8[i, j, k]; S_11[i, j] }", child: { schedule: "[N] -> L_0[{ S_4[i, j, k] -> [(i)]; S_10[i, j] -> [(i)]; S_7[i, j] -> [(i)]; S_5[i, j, k] -> [(i)]; S_6[i, j] -> [(i)]; S_3[i, j] -> [(i)]; S_9[i, j, k] -> [(i)]; S_1[i] -> [(i)]; S_12[i] -> [(i)]; S_2[i, j] -> [(i)]; S_8[i, j, k] -> [(i)]; S_11[i, j] -> [(i)] }]", child: { sequence: [ { filter: "[N] -> { S_1[i] }" }, { filter: "[N] -> { S_11[i, j]; S_10[i, j]; S_7[i, j]; S_5[i, j, k]; S_6[i, j]; S_3[i, j]; S_9[i, j, k]; S_2[i, j]; S_8[i, j, k]; S_4[i, j, k] }", child: { schedule: "[N] -> L_1[{ S_11[i, j] -> [(j)]; S_10[i, j] -> [(j)]; S_7[i, j] -> [(j)]; S_5[i, j, k] -> [(j)]; S_6[i, j] -> [(j)]; S_3[i, j] -> [(j)]; S_9[i, j, k] -> [(j)]; S_2[i, j] -> [(j)]; S_8[i, j, k] -> [(j)]; S_4[i, j, k] -> [(j)] }]", child: { sequence: [ { filter: "[N] -> { S_2[i, j] }" }, { filter: "[N] -> { S_3[i, j] }" }, { filter: "[N] -> { S_5[i, j, k]; S_4[i, j, k] }", child: { schedule: "[N] -> L_2[{ S_5[i, j, k] -> [(k)]; S_4[i, j, k] -> [(k)] }]", child: { sequence: [ { filter: "[N] -> { S_4[i, j, k] }" }, { filter: "[N] -> { S_5[i, j, k] }" } ] } } }, { filter: "[N] -> { S_6[i, j] }" }, { filter: "[N] -> { S_7[i, j] }" }, { filter: "[N] -> { S_9[i, j, k]; S_8[i, j, k] }", child: { schedule: "[N] -> L_3[{ S_9[i, j, k] -> [(k)]; S_8[i, j, k] -> [(k)] }]", child: { sequence: [ { filter: "[N] -> { S_8[i, j, k] }" }, { filter: "[N] -> { S_9[i, j, k] }" } ] } } }, { filter: "[N] -> { S_10[i, j] }" }, { filter: "[N] -> { S_11[i, j] }" } ] } } }, { filter: "[N] -> { S_12[i] }" } ] } } }, { filter: "[N] -> { S_13[]; S_14[]; S_15[] }", child: { set: [ { filter: "{ S_13[] }" }, { filter: "{ S_14[] }" }, { filter: "{ S_15[] }" } ] } } ] } }

#domain:
[N] -> { S_13[]; S_10[i, j] : 0 < i <= N and 0 < j <= N; S_7[i, j] : 0 < i <= N and 0 < j <= N; S_11[i, j] : 0 < i <= N and 0 < j <= N; S_5[i, j, k] : i <= N and 0 < j <= N and 0 < k <= i; S_14[]; S_6[i, j] : 0 < i <= N and 0 < j <= N; S_3[i, j] : 0 < i <= N and 0 < j <= N; S_15[]; S_9[i, j, k] : 0 < i <= N and j <= N and 0 < k <= j; S_1[i] : 0 < i <= N; S_0[]; S_12[i] : 0 < i <= N; S_2[i, j] : 0 < i <= N and 0 < j <= N; S_8[i, j, k] : 0 < i <= N and j <= N and 0 < k <= j; S_4[i, j, k] : i <= N and 0 < j <= N and 0 < k <= i }

#schedule map:
[N] -> { S_0[] -> [0, 0, 0, 0, 0, 0, 0]; S_8[i, j, k] -> [1, i, 1, j, 5, k, 0]; S_1[i] -> [1, i, 0, 0, 0, 0, 0]; S_6[i, j] -> [1, i, 1, j, 3, 0, 0]; S_5[i, j, k] -> [1, i, 1, j, 2, k, 1]; S_12[i] -> [1, i, 2, 0, 0, 0, 0]; S_14[] -> [2, 1, 0, 0, 0, 0, 0]; S_7[i, j] -> [1, i, 1, j, 4, 0, 0]; S_9[i, j, k] -> [1, i, 1, j, 5, k, 1]; S_10[i, j] -> [1, i, 1, j, 6, 0, 0]; S_4[i, j, k] -> [1, i, 1, j, 2, k, 0]; S_3[i, j] -> [1, i, 1, j, 1, 0, 0]; S_11[i, j] -> [1, i, 1, j, 7, 0, 0]; S_13[] -> [2, 0, 0, 0, 0, 0, 0]; S_15[] -> [2, 2, 0, 0, 0, 0, 0]; S_2[i, j] -> [1, i, 1, j, 0, 0, 0] }

#isl schedule:
{ domain: "[N] -> { S_13[]; S_10[i, j] : 0 < i <= N and 0 < j <= N; S_7[i, j] : 0 < i <= N and 0 < j <= N; S_11[i, j] : 0 < i <= N and 0 < j <= N; S_5[i, j, k] : i <= N and 0 < j <= N and 0 < k <= i; S_14[]; S_6[i, j] : 0 < i <= N and 0 < j <= N; S_3[i, j] : 0 < i <= N and 0 < j <= N; S_15[]; S_9[i, j, k] : 0 < i <= N and j <= N and 0 < k <= j; S_1[i] : 0 < i <= N; S_0[]; S_12[i] : 0 < i <= N; S_2[i, j] : 0 < i <= N and 0 < j <= N; S_8[i, j, k] : 0 < i <= N and j <= N and 0 < k <= j; S_4[i, j, k] : i <= N and 0 < j <= N and 0 < k <= i }", child: { set: [ { filter: "[N] -> { S_10[i, j]; S_6[i, j]; S_2[i, j]; S_8[i, j, k]; S_4[i, j, k] }", child: { schedule: "[N] -> [{ S_10[i, j] -> [(i)]; S_6[i, j] -> [(i)]; S_2[i, j] -> [(i)]; S_8[i, j, k] -> [(i)]; S_4[i, j, k] -> [(i)] }, { S_10[i, j] -> [(j)]; S_6[i, j] -> [(j)]; S_2[i, j] -> [(j)]; S_8[i, j, k] -> [(j)]; S_4[i, j, k] -> [(j)] }]", permutable: 1, coincident: [ 1, 1 ], child: { schedule: "[N] -> [{ S_10[i, j] -> [(N)]; S_6[i, j] -> [(0)]; S_2[i, j] -> [(0)]; S_8[i, j, k] -> [(k)]; S_4[i, j, k] -> [(k)] }]", permutable: 1, coincident: [ 1 ], child: { set: [ { filter: "[N] -> { S_10[i, j]; S_8[i, j, k]; S_4[i, j, k] }", child: { sequence: [ { filter: "[N] -> { S_4[i, j, k] }" }, { filter: "[N] -> { S_8[i, j, k] }" }, { filter: "[N] -> { S_10[i, j] }" } ] } }, { filter: "[N] -> { S_2[i, j] }" }, { filter: "[N] -> { S_6[i, j] }" } ] } } } }, { filter: "[N] -> { S_0[]; S_12[i] }", child: { schedule: "[N] -> [{ S_0[] -> [(0)]; S_12[i] -> [(i)] }]", permutable: 1, coincident: [ 1 ] } }, { filter: "[N] -> { S_1[i]; S_11[i, j] }", child: { schedule: "[N] -> [{ S_1[i] -> [(i)]; S_11[i, j] -> [(i)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[N] -> [{ S_1[i] -> [(0)]; S_11[i, j] -> [(j)] }]", permutable: 1, coincident: [ 1 ] } } }, { filter: "[N] -> { S_7[i, j]; S_5[i, j, k]; S_3[i, j]; S_9[i, j, k] }", child: { schedule: "[N] -> [{ S_7[i, j] -> [(i)]; S_5[i, j, k] -> [(i)]; S_3[i, j] -> [(i)]; S_9[i, j, k] -> [(i)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[N] -> [{ S_7[i, j] -> [(j)]; S_5[i, j, k] -> [(j)]; S_3[i, j] -> [(j)]; S_9[i, j, k] -> [(j)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[N] -> [{ S_7[i, j] -> [(N)]; S_5[i, j, k] -> [(k)]; S_3[i, j] -> [(0)]; S_9[i, j, k] -> [(N + k)] }]", permutable: 1, coincident: [ 1 ], child: { set: [ { filter: "[N] -> { S_9[i, j, k] }" }, { filter: "[N] -> { S_3[i, j] }" }, { filter: "[N] -> { S_7[i, j]; S_5[i, j, k] }", child: { sequence: [ { filter: "[N] -> { S_5[i, j, k] }" }, { filter: "[N] -> { S_7[i, j] }" } ] } } ] } } } } }, { filter: "[N] -> { S_15[] }" }, { filter: "[N] -> { S_14[] }" }, { filter: "[N] -> { S_13[] }" } ] } }

#isl schedule map:
[N] -> { S_11[i, j] -> [2, i, j, 0, 0, 0]; S_13[] -> [6, 0, 0, 0, 0, 0]; S_3[i, j] -> [3, i, j, 0, 1, 0]; S_6[i, j] -> [0, i, j, 0, 2, 0]; S_0[] -> [1, 0, 0, 0, 0, 0]; S_10[i, j] -> [0, i, j, N, 0, 2]; S_12[i] -> [1, i, 0, 0, 0, 0]; S_9[i, j, k] -> [3, i, j, N + k, 0, 0]; S_8[i, j, k] -> [0, i, j, k, 0, 1]; S_1[i] -> [2, i, 0, 0, 0, 0]; S_14[] -> [5, 0, 0, 0, 0, 0]; S_5[i, j, k] -> [3, i, j, k, 2, 0]; S_4[i, j, k] -> [0, i, j, k, 0, 0]; S_15[] -> [4, 0, 0, 0, 0, 0]; S_7[i, j] -> [3, i, j, N, 2, 1]; S_2[i, j] -> [0, i, j, 0, 1, 0] }

#writes:
[N] -> { S_12[i] -> i[] : 0 < i <= N; S_4[i, j, k] -> m1[i, j] : 0 <= i <= N and 0 < j <= N and 0 < k <= i; S_9[i, j, k] -> k[] : 0 < i <= N and j <= N and 0 < k <= j; S_5[i, j, k] -> k[] : i <= N and 0 < j <= N and 0 < k <= i; S_0[] -> i[]; S_10[i, j] -> F[i, j] : 0 < i <= N and 0 < j <= N; S_6[i, j] -> m2[i, j] : 0 < i <= N and 0 < j <= N; S_3[i, j] -> k[] : 0 < i <= N and 0 < j <= N; S_2[i, j] -> m1[i, j] : 0 < i <= N and 0 < j <= N; S_11[i, j] -> j[] : 0 < i <= N and 0 < j <= N; S_8[i, j, k] -> m2[i, j] : 0 < i <= N and 0 <= j <= N and 0 < k <= j; S_1[i] -> j[] : 0 < i <= N; S_7[i, j] -> k[] : 0 < i <= N and 0 < j <= N }

#reads:
[N] -> { S_10[i, j] -> m2[i, j] : 0 < i <= N and 0 < j <= N; S_8[i, j, k] -> F[i, j - k] : 0 < i <= N and j <= N and 0 < k <= j; S_4[i, j, k] -> W[k] : i <= N and 0 < j <= N and 0 < k <= i; S_4[i, j, k] -> m1[i, j] : 0 <= i <= N and 0 < j <= N and 0 < k <= i; S_10[i, j] -> a[i] : 0 < i <= N and 0 < j <= N; S_10[i, j] -> F[-1 + i, -1 + j] : 0 < i <= N and 0 < j <= N; S_4[i, j, k] -> F[i - k, j] : i <= N and 0 < j <= N and 0 < k <= i; S_10[i, j] -> m1[i, j] : 0 < i <= N and 0 < j <= N; S_8[i, j, k] -> m2[i, j] : 0 < i <= N and 0 <= j <= N and 0 < k <= j; S_10[i, j] -> b[i] : 0 < i <= N and 0 < j <= N; S_8[i, j, k] -> W[k] : 0 < i <= N and j <= N and 0 < k <= j }

#dep_raw:
[N] -> { S_6[i, j] -> S_10[i' = i, j' = j] : 0 < i <= N and 0 < j <= N; S_10[i, j] -> S_4[i', j' = j, k = -i + i'] : i > 0 and 0 < j <= N and i < i' <= N; S_10[i, j] -> S_8[i' = i, j', k = -j + j'] : 0 < i <= N and j > 0 and j < j' <= N; S_4[i, j, k] -> S_4[i' = i, j' = j, k'] : i <= N and 0 < j <= N and k > 0 and k < k' <= i; S_4[i, j, k] -> S_10[i' = i, j' = j] : i <= N and 0 < j <= N and 0 < k <= i; S_2[i, j] -> S_4[i' = i, j' = j, k] : i <= N and 0 < j <= N and 0 < k <= i; S_10[i, j] -> S_10[i' = 1 + i, j' = 1 + j] : 0 < i < N and 0 < j < N; S_2[i, j] -> S_10[i' = i, j' = j] : 0 < i <= N and 0 < j <= N; S_8[i, j, k] -> S_10[i' = i, j' = j] : 0 < i <= N and j <= N and 0 < k <= j; S_8[i, j, k] -> S_8[i' = i, j' = j, k'] : 0 < i <= N and j <= N and k > 0 and k < k' <= j; S_6[i, j] -> S_8[i' = i, j' = j, k] : 0 < i <= N and j <= N and 0 < k <= j }

#dep_waw:
[N] -> { S_8[i, j, k] -> S_8[i' = i, j' = j, k'] : 0 < i <= N and j <= N and k > 0 and k < k' <= j; S_0[] -> S_12[i] : 0 < i <= N; S_7[i, j] -> S_7[i', j'] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N; S_7[i, j] -> S_7[i' = i, j'] : 0 < i <= N and j > 0 and j < j' <= N; S_9[i, j, k] -> S_7[i', j'] : i > 0 and j <= N and 0 < k <= j and i < i' <= N and 0 < j' <= N; S_9[i, j, k] -> S_7[i' = i, j'] : 0 < i <= N and 0 < k <= j and j < j' <= N; S_5[i, j, k] -> S_3[i', j'] : 0 < j <= N and 0 < k <= i and i < i' <= N and 0 < j' <= N; S_5[i, j, k] -> S_3[i' = i, j'] : i <= N and j > 0 and 0 < k <= i and j < j' <= N; S_2[i, j] -> S_4[i' = i, j' = j, k] : i <= N and 0 < j <= N and 0 < k <= i; S_4[i, j, k] -> S_4[i' = i, j' = j, k'] : i <= N and 0 < j <= N and k > 0 and k < k' <= i; S_9[i, j, k] -> S_9[i', j', k'] : i > 0 and j <= N and 0 < k <= j and i < i' <= N and j' <= N and 0 < k' <= j'; S_9[i, j, k] -> S_9[i' = i, j', k'] : 0 < i <= N and 0 < k <= j and j < j' <= N and 0 < k' <= j'; S_9[i, j, k] -> S_9[i' = i, j' = j, k'] : 0 < i <= N and j <= N and k > 0 and k < k' <= j; S_1[i] -> S_11[i', j] : i > 0 and i <= i' <= N and 0 < j <= N; S_1[i] -> S_1[i'] : i > 0 and i < i' <= N; S_6[i, j] -> S_8[i' = i, j' = j, k] : 0 < i <= N and j <= N and 0 < k <= j; S_7[i, j] -> S_5[i', j', k] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N and 0 < k <= i'; S_7[i, j] -> S_5[i' = i, j', k] : i <= N and j > 0 and j < j' <= N and 0 < k <= i; S_11[i, j] -> S_1[i'] : i > 0 and 0 < j <= N and i < i' <= N; S_11[i, j] -> S_11[i', j'] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N; S_11[i, j] -> S_11[i' = i, j'] : 0 < i <= N and j > 0 and j < j' <= N; S_5[i, j, k] -> S_5[i', j', k'] : 0 < j <= N and 0 < k <= i and i < i' <= N and 0 < j' <= N and 0 < k' <= i'; S_5[i, j, k] -> S_5[i' = i, j', k'] : i <= N and j > 0 and 0 < k <= i and j < j' <= N and 0 < k' <= i; S_5[i, j, k] -> S_5[i' = i, j' = j, k'] : i <= N and 0 < j <= N and k > 0 and k < k' <= i; S_9[i, j, k] -> S_3[i', j'] : i > 0 and j <= N and 0 < k <= j and i < i' <= N and 0 < j' <= N; S_9[i, j, k] -> S_3[i' = i, j'] : 0 < i <= N and 0 < k <= j and j < j' <= N; S_5[i, j, k] -> S_7[i', j'] : 0 < j <= N and 0 < k <= i and i < i' <= N and 0 < j' <= N; S_5[i, j, k] -> S_7[i' = i, j'] : i <= N and j > 0 and 0 < k <= i and j <= j' <= N; S_12[i] -> S_12[i'] : i > 0 and i < i' <= N; S_5[i, j, k] -> S_9[i', j', k'] : 0 < j <= N and 0 < k <= i and i < i' <= N and j' <= N and 0 < k' <= j'; S_5[i, j, k] -> S_9[i' = i, j', k'] : i <= N and j > 0 and 0 < k <= i and j <= j' <= N and 0 < k' <= j'; S_3[i, j] -> S_5[i', j', k] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N and 0 < k <= i'; S_3[i, j] -> S_5[i' = i, j', k] : i <= N and j > 0 and j <= j' <= N and 0 < k <= i; S_9[i, j, k] -> S_5[i', j', k'] : i > 0 and j <= N and 0 < k <= j and i < i' <= N and 0 < j' <= N and 0 < k' <= i'; S_9[i, j, k] -> S_5[i' = i, j', k'] : i <= N and 0 < k <= j and j < j' <= N and 0 < k' <= i; S_3[i, j] -> S_3[i', j'] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N; S_3[i, j] -> S_3[i' = i, j'] : 0 < i <= N and j > 0 and j < j' <= N; S_3[i, j] -> S_9[i', j', k] : i > 0 and 0 < j <= N and i < i' <= N and j' <= N and 0 < k <= j'; S_3[i, j] -> S_9[i' = i, j', k] : 0 < i <= N and j > 0 and j <= j' <= N and 0 < k <= j'; S_3[i, j] -> S_7[i', j'] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N; S_3[i, j] -> S_7[i' = i, j'] : 0 < i <= N and j > 0 and j <= j' <= N; S_7[i, j] -> S_9[i', j', k] : i > 0 and 0 < j <= N and i < i' <= N and j' <= N and 0 < k <= j'; S_7[i, j] -> S_9[i' = i, j', k] : 0 < i <= N and j > 0 and j <= j' <= N and 0 < k <= j'; S_7[i, j] -> S_3[i', j'] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N; S_7[i, j] -> S_3[i' = i, j'] : 0 < i <= N and j > 0 and j < j' <= N }

#dep_war:
[N] -> { S_4[i, j, k] -> S_4[i' = i, j' = j, k'] : i <= N and 0 < j <= N and k > 0 and k < k' <= i; S_8[i, j, k] -> S_8[i' = i, j' = j, k'] : 0 < i <= N and j <= N and k > 0 and k < k' <= j }

#relations:
[N] -> { S_7[i, j] -> S_3[i', j'] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N; S_7[i, j] -> S_3[i' = i, j'] : 0 < i <= N and j > 0 and j < j' <= N; S_2[i, j] -> S_10[i' = i, j' = j] : 0 < i <= N and 0 < j <= N; S_7[i, j] -> S_7[i', j'] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N; S_7[i, j] -> S_7[i' = i, j'] : 0 < i <= N and j > 0 and j < j' <= N; S_9[i, j, k] -> S_7[i', j'] : i > 0 and j <= N and 0 < k <= j and i < i' <= N and 0 < j' <= N; S_9[i, j, k] -> S_7[i' = i, j'] : 0 < i <= N and 0 < k <= j and j < j' <= N; S_0[] -> S_12[i] : 0 < i <= N; S_5[i, j, k] -> S_3[i', j'] : 0 < j <= N and 0 < k <= i and i < i' <= N and 0 < j' <= N; S_5[i, j, k] -> S_3[i' = i, j'] : i <= N and j > 0 and 0 < k <= i and j < j' <= N; S_10[i, j] -> S_4[i', j' = j, k = -i + i'] : i > 0 and 0 < j <= N and i < i' <= N; S_2[i, j] -> S_4[i' = i, j' = j, k] : i <= N and 0 < j <= N and 0 < k <= i; S_4[i, j, k] -> S_4[i' = i, j' = j, k'] : i <= N and 0 < j <= N and k > 0 and k < k' <= i; S_9[i, j, k] -> S_9[i', j', k'] : i > 0 and j <= N and 0 < k <= j and i < i' <= N and j' <= N and 0 < k' <= j'; S_9[i, j, k] -> S_9[i' = i, j', k'] : 0 < i <= N and 0 < k <= j and j < j' <= N and 0 < k' <= j'; S_9[i, j, k] -> S_9[i' = i, j' = j, k'] : 0 < i <= N and j <= N and k > 0 and k < k' <= j; S_10[i, j] -> S_10[i' = 1 + i, j' = 1 + j] : 0 < i < N and 0 < j < N; S_1[i] -> S_1[i'] : i > 0 and i < i' <= N; S_1[i] -> S_11[i', j] : i > 0 and i <= i' <= N and 0 < j <= N; S_6[i, j] -> S_8[i' = i, j' = j, k] : 0 < i <= N and j <= N and 0 < k <= j; S_7[i, j] -> S_5[i', j', k] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N and 0 < k <= i'; S_7[i, j] -> S_5[i' = i, j', k] : i <= N and j > 0 and j < j' <= N and 0 < k <= i; S_11[i, j] -> S_1[i'] : i > 0 and 0 < j <= N and i < i' <= N; S_6[i, j] -> S_10[i' = i, j' = j] : 0 < i <= N and 0 < j <= N; S_11[i, j] -> S_11[i', j'] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N; S_11[i, j] -> S_11[i' = i, j'] : 0 < i <= N and j > 0 and j < j' <= N; S_8[i, j, k] -> S_10[i' = i, j' = j] : 0 < i <= N and j <= N and 0 < k <= j; S_5[i, j, k] -> S_5[i', j', k'] : 0 < j <= N and 0 < k <= i and i < i' <= N and 0 < j' <= N and 0 < k' <= i'; S_5[i, j, k] -> S_5[i' = i, j', k'] : i <= N and j > 0 and 0 < k <= i and j < j' <= N and 0 < k' <= i; S_5[i, j, k] -> S_5[i' = i, j' = j, k'] : i <= N and 0 < j <= N and k > 0 and k < k' <= i; S_10[i, j] -> S_8[i' = i, j', k = -j + j'] : 0 < i <= N and j > 0 and j < j' <= N; S_9[i, j, k] -> S_3[i', j'] : i > 0 and j <= N and 0 < k <= j and i < i' <= N and 0 < j' <= N; S_9[i, j, k] -> S_3[i' = i, j'] : 0 < i <= N and 0 < k <= j and j < j' <= N; S_5[i, j, k] -> S_7[i', j'] : 0 < j <= N and 0 < k <= i and i < i' <= N and 0 < j' <= N; S_5[i, j, k] -> S_7[i' = i, j'] : i <= N and j > 0 and 0 < k <= i and j <= j' <= N; S_12[i] -> S_12[i'] : i > 0 and i < i' <= N; S_5[i, j, k] -> S_9[i', j', k'] : 0 < j <= N and 0 < k <= i and i < i' <= N and j' <= N and 0 < k' <= j'; S_5[i, j, k] -> S_9[i' = i, j', k'] : i <= N and j > 0 and 0 < k <= i and j <= j' <= N and 0 < k' <= j'; S_4[i, j, k] -> S_10[i' = i, j' = j] : i <= N and 0 < j <= N and 0 < k <= i; S_3[i, j] -> S_5[i', j', k] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N and 0 < k <= i'; S_3[i, j] -> S_5[i' = i, j', k] : i <= N and j > 0 and j <= j' <= N and 0 < k <= i; S_9[i, j, k] -> S_5[i', j', k'] : i > 0 and j <= N and 0 < k <= j and i < i' <= N and 0 < j' <= N and 0 < k' <= i'; S_9[i, j, k] -> S_5[i' = i, j', k'] : i <= N and 0 < k <= j and j < j' <= N and 0 < k' <= i; S_3[i, j] -> S_3[i', j'] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N; S_3[i, j] -> S_3[i' = i, j'] : 0 < i <= N and j > 0 and j < j' <= N; S_3[i, j] -> S_9[i', j', k] : i > 0 and 0 < j <= N and i < i' <= N and j' <= N and 0 < k <= j'; S_3[i, j] -> S_9[i' = i, j', k] : 0 < i <= N and j > 0 and j <= j' <= N and 0 < k <= j'; S_3[i, j] -> S_7[i', j'] : i > 0 and 0 < j <= N and i < i' <= N and 0 < j' <= N; S_3[i, j] -> S_7[i' = i, j'] : 0 < i <= N and j > 0 and j <= j' <= N; S_7[i, j] -> S_9[i', j', k] : i > 0 and 0 < j <= N and i < i' <= N and j' <= N and 0 < k <= j'; S_7[i, j] -> S_9[i' = i, j', k] : 0 < i <= N and j > 0 and j <= j' <= N and 0 < k <= j'; S_8[i, j, k] -> S_8[i' = i, j' = j, k'] : 0 < i <= N and j <= N and k > 0 and k < k' <= j }

#delta:
{ [i] : i > 0; [i, j, k] : i > 0; [i = 0, j, k] : j >= 0; [i, j] : i > 0; [i = 0, j] : j >= 0 }

#######################################################################

#######################################################################

#norm schedule map:
[N] -> { S_0[] -> [0, 0, 0, 0, 0, 0, 0]; S_8[i, j, k] -> [1, i, 1, j, 5, k, 0]; S_1[i] -> [1, i, 0, 0, 0, 0, 0]; S_6[i, j] -> [1, i, 1, j, 3, 0, 0]; S_5[i, j, k] -> [1, i, 1, j, 2, k, 1]; S_12[i] -> [1, i, 2, 0, 0, 0, 0]; S_14[] -> [2, 1, 0, 0, 0, 0, 0]; S_7[i, j] -> [1, i, 1, j, 4, 0, 0]; S_9[i, j, k] -> [1, i, 1, j, 5, k, 1]; S_10[i, j] -> [1, i, 1, j, 6, 0, 0]; S_4[i, j, k] -> [1, i, 1, j, 2, k, 0]; S_3[i, j] -> [1, i, 1, j, 1, 0, 0]; S_11[i, j] -> [1, i, 1, j, 7, 0, 0]; S_13[] -> [2, 0, 0, 0, 0, 0, 0]; S_15[] -> [2, 2, 0, 0, 0, 0, 0]; S_2[i, j] -> [1, i, 1, j, 0, 0, 0] }

#######################################################################

#######################################################################

#normalized loop (0):

#mapper:
[N] -> { S_0[] -> S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] }

#domain:
[N] -> { S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] }

#schedule map:
[N] -> { S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> [0, 0, 0, 0, 0, 0, 0] }

#writes:
[N] -> { S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> i[] }

#reads:
[N] -> {  }

#dep_raw:
[N] -> {  }

#dep_waw:
[N] -> {  }

#dep_war:
[N] -> {  }

#relations:
[N] -> {  }

#delta:
[N] -> {  }

#######################################################################

#######################################################################

#normalized loop (1):

#mapper:
[N] -> { S_5[i, j, k] -> S_5[i0 = 1, i1 = i, i2 = 1, i3 = j, i4 = 2, i5 = k, i6 = 1]; S_12[i] -> S_12[i0 = 1, i1 = i, i2 = 2, i3 = 1 + N, i4 = 0, i5 = 2 + N, i6 = 0]; S_10[i, j] -> S_10[i0 = 1, i1 = i, i2 = 1, i3 = j, i4 = 6, i5 = 1 + j, i6 = 0]; S_2[i, j] -> S_2[i0 = 1, i1 = i, i2 = 1, i3 = j, i4 = 0, i5 = 0, i6 = 0]; S_9[i, j, k] -> S_9[i0 = 1, i1 = i, i2 = 1, i3 = j, i4 = 5, i5 = k, i6 = 1]; S_7[i, j] -> S_7[i0 = 1, i1 = i, i2 = 1, i3 = j, i4 = 4, i5 = 1 + i, i6 = 0]; S_11[i, j] -> S_11[i0 = 1, i1 = i, i2 = 1, i3 = j, i4 = 7, i5 = 1 + j, i6 = 0]; S_1[i] -> S_1[i0 = 1, i1 = i, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0]; S_3[i, j] -> S_3[i0 = 1, i1 = i, i2 = 1, i3 = j, i4 = 1, i5 = 0, i6 = 0]; S_4[i, j, k] -> S_4[i0 = 1, i1 = i, i2 = 1, i3 = j, i4 = 2, i5 = k, i6 = 0]; S_6[i, j] -> S_6[i0 = 1, i1 = i, i2 = 1, i3 = j, i4 = 3, i5 = 1 + i, i6 = 0]; S_8[i, j, k] -> S_8[i0 = 1, i1 = i, i2 = 1, i3 = j, i4 = 5, i5 = k, i6 = 0] }

#domain:
[N] -> { S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] : i1 <= N and 0 < i3 <= N and 0 < i5 <= i1; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] : i1 <= N and 0 < i3 <= N and 0 < i5 <= i1; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 3, i5 = 1 + i1, i6 = 0] : 0 < i1 <= N and 0 < i3 <= N; S_12[i0 = 1, i1, i2 = 2, i3 = 1 + N, i4 = 0, i5 = 2 + N, i6 = 0] : 0 < i1 <= N; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] : 0 < i1 <= N and i3 <= N and 0 < i5 <= i3; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] : 0 < i1 <= N and 0 < i3 <= N; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] : 0 < i1 <= N and 0 < i3 <= N; S_11[i0 = 1, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] : 0 < i1 <= N and 0 < i3 <= N; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] : 0 < i1 <= N; S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0] : 0 < i1 <= N and 0 < i3 <= N; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] : 0 < i1 <= N and i3 <= N and 0 < i5 <= i3; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] : 0 < i1 <= N and 0 < i3 <= N }

#schedule map:
[N] -> { S_12[i0 = 1, i1, i2 = 2, i3 = 1 + N, i4 = 0, i5 = 2 + N, i6 = 0] -> [1, i1, 2, 0, 0, 0, 0]; S_11[i0 = 1, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] -> [1, i1, 1, i3, 7, 0, 0]; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> [1, i1, 1, i3, 2, i5, 0]; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> [1, i1, 0, 0, 0, 0, 0]; S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0] -> [1, i1, 1, i3, 0, 0, 0]; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> [1, i1, 1, i3, 6, 0, 0]; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> [1, i1, 1, i3, 5, i5, 0]; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> [1, i1, 1, i3, 5, i5, 1]; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> [1, i1, 1, i3, 2, i5, 1]; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> [1, i1, 1, i3, 4, 0, 0]; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> [1, i1, 1, i3, 1, 0, 0]; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 3, i5 = 1 + i1, i6 = 0] -> [1, i1, 1, i3, 3, 0, 0] }

#writes:
[N] -> { S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> m1[i1, i3] : 0 <= i1 <= N and 0 < i3 <= N and 0 < i5 <= i1; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 3, i5 = 1 + i1, i6 = 0] -> m2[i1, i3] : 0 < i1 <= N and 0 < i3 <= N; S_11[i0 = 1, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] -> j[] : 0 < i1 <= N and 0 < i3 <= N; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> j[] : 0 < i1 <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> k[] : 0 < i1 <= N and 0 < i3 <= N; S_12[i0 = 1, i1, i2 = 2, i3 = 1 + N, i4 = 0, i5 = 2 + N, i6 = 0] -> i[] : 0 < i1 <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> k[] : 0 < i1 <= N and 0 < i3 <= N; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> F[i1, i3] : 0 < i1 <= N and 0 < i3 <= N; S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0] -> m1[i1, i3] : 0 < i1 <= N and 0 < i3 <= N; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> k[] : i1 <= N and 0 < i3 <= N and 0 < i5 <= i1; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> k[] : 0 < i1 <= N and i3 <= N and 0 < i5 <= i3; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> m2[i1, i3] : 0 < i1 <= N and 0 <= i3 <= N and 0 < i5 <= i3 }

#reads:
[N] -> { S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> m1[i1, i3] : 0 <= i1 <= N and 0 < i3 <= N and 0 < i5 <= i1; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> m2[i1, i3] : 0 < i1 <= N and 0 < i3 <= N; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> F[i1 - i5, i3] : i1 <= N and 0 < i3 <= N and 0 < i5 <= i1; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> a[i1] : 0 < i1 <= N and 0 < i3 <= N; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> F[i1, i3 - i5] : 0 < i1 <= N and i3 <= N and 0 < i5 <= i3; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> F[-1 + i1, -1 + i3] : 0 < i1 <= N and 0 < i3 <= N; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> W[i5] : 0 < i1 <= N and i3 <= N and 0 < i5 <= i3; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> m1[i1, i3] : 0 < i1 <= N and 0 < i3 <= N; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> b[i1] : 0 < i1 <= N and 0 < i3 <= N; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> W[i5] : i1 <= N and 0 < i3 <= N and 0 < i5 <= i1; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> m2[i1, i3] : 0 < i1 <= N and 0 <= i3 <= N and 0 < i5 <= i3 }

#dep_raw:
[N] -> { S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0] -> S_10[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 6, i5' = 1 + i3, i6' = 0] : 0 < i1 <= N and 0 < i3 <= N; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> S_8[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 5, i5' = -i3 + i3', i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 < i3' <= N; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> S_10[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 6, i5' = 1 + i3, i6' = 0] : i1 <= N and 0 < i3 <= N and 0 < i5 <= i1; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 3, i5 = 1 + i1, i6 = 0] -> S_10[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 6, i5' = 1 + i3, i6' = 0] : 0 < i1 <= N and 0 < i3 <= N; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 3, i5 = 1 + i1, i6 = 0] -> S_8[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 5, i5', i6' = 0] : 0 < i1 <= N and i3 <= N and 0 < i5' <= i3; S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 2, i5', i6' = 0] : i1 <= N and 0 < i3 <= N and 0 < i5' <= i1; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> S_8[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 5, i5', i6' = 0] : 0 < i1 <= N and i3 <= N and i5 > 0 and i5 < i5' <= i3; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> S_10[i0' = 1, i1' = 1 + i1, i2' = 1, i3' = 1 + i3, i4' = 6, i5' = 2 + i3, i6' = 0] : 0 < i1 < N and 0 < i3 < N; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 2, i5', i6' = 0] : i1 <= N and 0 < i3 <= N and i5 > 0 and i5 < i5' <= i1; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> S_10[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 6, i5' = 1 + i3, i6' = 0] : 0 < i1 <= N and i3 <= N and 0 < i5 <= i3; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> S_4[i0' = 1, i1', i2' = 1, i3' = i3, i4' = 2, i5' = -i1 + i1', i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N }

#dep_waw:
[N] -> { S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_3[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_3[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 < i3' <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N and 0 < i5' <= i1'; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 <= N and i3 > 0 and i3 < i3' <= N and 0 < i5' <= i1; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> S_11[i0' = 1, i1', i2' = 1, i3', i4' = 7, i5' = 1 + i3', i6' = 0] : i1 > 0 and i1 <= i1' <= N and 0 < i3' <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_9[i0' = 1, i1', i2' = 1, i3', i4' = 5, i5', i6' = 1] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and i3' <= N and 0 < i5' <= i3'; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_9[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 5, i5', i6' = 1] : 0 < i1 <= N and i3 > 0 and i3 <= i3' <= N and 0 < i5' <= i3'; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_9[i0' = 1, i1', i2' = 1, i3', i4' = 5, i5', i6' = 1] : 0 < i3 <= N and 0 < i5 <= i1 and i1 < i1' <= N and i3' <= N and 0 < i5' <= i3'; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_9[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 5, i5', i6' = 1] : i1 <= N and i3 > 0 and 0 < i5 <= i1 and i3 <= i3' <= N and 0 < i5' <= i3'; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_3[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : i1 > 0 and i3 <= N and 0 < i5 <= i3 and i1 < i1' <= N and 0 < i3' <= N; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_3[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : 0 < i1 <= N and 0 < i5 <= i3 and i3 < i3' <= N; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> S_8[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 5, i5', i6' = 0] : 0 < i1 <= N and i3 <= N and i5 > 0 and i5 < i5' <= i3; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 4, i5' = 1 + i1', i6' = 0] : i1 > 0 and i3 <= N and 0 < i5 <= i3 and i1 < i1' <= N and 0 < i3' <= N; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_7[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 4, i5' = 1 + i1, i6' = 0] : 0 < i1 <= N and 0 < i5 <= i3 and i3 < i3' <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 4, i5' = 1 + i1', i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_7[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 4, i5' = 1 + i1, i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 < i3' <= N; S_11[i0 = 1, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] -> S_11[i0' = 1, i1', i2' = 1, i3', i4' = 7, i5' = 1 + i3', i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N; S_11[i0 = 1, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] -> S_11[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 7, i5' = 1 + i3', i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 < i3' <= N; S_12[i0 = 1, i1, i2 = 2, i3 = 1 + N, i4 = 0, i5 = 2 + N, i6 = 0] -> S_12[i0' = 1, i1', i2' = 2, i3' = 1 + N, i4' = 0, i5' = 2 + N, i6' = 0] : 0 < i1 <= N and i1' > i1 and 0 < i1' <= N; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_9[i0' = 1, i1', i2' = 1, i3', i4' = 5, i5', i6' = 1] : i1 > 0 and i3 <= N and 0 < i5 <= i3 and i1 < i1' <= N and i3' <= N and 0 < i5' <= i3'; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_9[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 5, i5', i6' = 1] : 0 < i1 <= N and 0 < i5 <= i3 and i3 < i3' <= N and 0 < i5' <= i3'; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_9[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 5, i5', i6' = 1] : 0 < i1 <= N and i3 <= N and i5 > 0 and i5 < i5' <= i3; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_5[i0' = 1, i1', i2' = 1, i3', i4' = 2, i5', i6' = 1] : 0 < i3 <= N and 0 < i5 <= i1 and i1 < i1' <= N and 0 < i3' <= N and 0 < i5' <= i1'; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 <= N and i3 > 0 and 0 < i5 <= i1 and i3 < i3' <= N and 0 < i5' <= i1; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 2, i5', i6' = 1] : i1 <= N and 0 < i3 <= N and i5 > 0 and i5 < i5' <= i1; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_3[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : 0 < i3 <= N and 0 < i5 <= i1 and i1 < i1' <= N and 0 < i3' <= N; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_3[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : i1 <= N and i3 > 0 and 0 < i5 <= i1 and i3 < i3' <= N; S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 2, i5', i6' = 0] : i1 <= N and 0 < i3 <= N and 0 < i5' <= i1; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_5[i0' = 1, i1', i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 > 0 and i3 <= N and 0 < i5 <= i3 and i1 < i1' <= N and 0 < i3' <= N and 0 < i5' <= i1'; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 <= N and 0 < i5 <= i3 and i3 < i3' <= N and 0 < i5' <= i1; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> S_1[i0' = 1, i1', i2' = 0, i3' = 0, i4' = 0, i5' = 0, i6' = 0] : 0 < i1 <= N and i1' > i1 and 0 < i1' <= N; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 3, i5 = 1 + i1, i6 = 0] -> S_8[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 5, i5', i6' = 0] : 0 < i1 <= N and i3 <= N and 0 < i5' <= i3; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 4, i5' = 1 + i1', i6' = 0] : 0 < i3 <= N and 0 < i5 <= i1 and i1 < i1' <= N and 0 < i3' <= N; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_7[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 4, i5' = 1 + i1, i6' = 0] : i1 <= N and i3 > 0 and 0 < i5 <= i1 and i3 <= i3' <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_3[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_3[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 < i3' <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 4, i5' = 1 + i1', i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_7[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 4, i5' = 1 + i1, i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 <= i3' <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N and 0 < i5' <= i1'; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 <= N and i3 > 0 and i3 <= i3' <= N and 0 < i5' <= i1; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 2, i5', i6' = 0] : i1 <= N and 0 < i3 <= N and i5 > 0 and i5 < i5' <= i1; S_11[i0 = 1, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] -> S_1[i0' = 1, i1', i2' = 0, i3' = 0, i4' = 0, i5' = 0, i6' = 0] : 0 < i1 <= N and 0 < i3 <= N and i1' > i1 and 0 < i1' <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_9[i0' = 1, i1', i2' = 1, i3', i4' = 5, i5', i6' = 1] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and i3' <= N and 0 < i5' <= i3'; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_9[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 5, i5', i6' = 1] : 0 < i1 <= N and i3 > 0 and i3 <= i3' <= N and 0 < i5' <= i3' }

#dep_war:
[N] -> { S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> S_8[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 5, i5', i6' = 0] : 0 < i1 <= N and i3 <= N and i5 > 0 and i5 < i5' <= i3; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 2, i5', i6' = 0] : i1 <= N and 0 < i3 <= N and i5 > 0 and i5 < i5' <= i1 }

#relations:
[N] -> { S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_3[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_3[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 < i3' <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N and 0 < i5' <= i1'; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 <= N and i3 > 0 and i3 < i3' <= N and 0 < i5' <= i1; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> S_11[i0' = 1, i1', i2' = 1, i3', i4' = 7, i5' = 1 + i3', i6' = 0] : i1 > 0 and i1 <= i1' <= N and 0 < i3' <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_9[i0' = 1, i1', i2' = 1, i3', i4' = 5, i5', i6' = 1] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and i3' <= N and 0 < i5' <= i3'; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_9[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 5, i5', i6' = 1] : 0 < i1 <= N and i3 > 0 and i3 <= i3' <= N and 0 < i5' <= i3'; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_9[i0' = 1, i1', i2' = 1, i3', i4' = 5, i5', i6' = 1] : 0 < i3 <= N and 0 < i5 <= i1 and i1 < i1' <= N and i3' <= N and 0 < i5' <= i3'; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_9[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 5, i5', i6' = 1] : i1 <= N and i3 > 0 and 0 < i5 <= i1 and i3 <= i3' <= N and 0 < i5' <= i3'; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_3[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : i1 > 0 and i3 <= N and 0 < i5 <= i3 and i1 < i1' <= N and 0 < i3' <= N; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_3[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : 0 < i1 <= N and 0 < i5 <= i3 and i3 < i3' <= N; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> S_8[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 5, i5', i6' = 0] : 0 < i1 <= N and i3 <= N and i5 > 0 and i5 < i5' <= i3; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 4, i5' = 1 + i1', i6' = 0] : i1 > 0 and i3 <= N and 0 < i5 <= i3 and i1 < i1' <= N and 0 < i3' <= N; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_7[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 4, i5' = 1 + i1, i6' = 0] : 0 < i1 <= N and 0 < i5 <= i3 and i3 < i3' <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 4, i5' = 1 + i1', i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 4, i5 = 1 + i1, i6 = 0] -> S_7[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 4, i5' = 1 + i1, i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 < i3' <= N; S_11[i0 = 1, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] -> S_11[i0' = 1, i1', i2' = 1, i3', i4' = 7, i5' = 1 + i3', i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N; S_11[i0 = 1, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] -> S_11[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 7, i5' = 1 + i3', i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 < i3' <= N; S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0] -> S_10[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 6, i5' = 1 + i3, i6' = 0] : 0 < i1 <= N and 0 < i3 <= N; S_12[i0 = 1, i1, i2 = 2, i3 = 1 + N, i4 = 0, i5 = 2 + N, i6 = 0] -> S_12[i0' = 1, i1', i2' = 2, i3' = 1 + N, i4' = 0, i5' = 2 + N, i6' = 0] : 0 < i1 <= N and i1' > i1 and 0 < i1' <= N; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_9[i0' = 1, i1', i2' = 1, i3', i4' = 5, i5', i6' = 1] : i1 > 0 and i3 <= N and 0 < i5 <= i3 and i1 < i1' <= N and i3' <= N and 0 < i5' <= i3'; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_9[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 5, i5', i6' = 1] : 0 < i1 <= N and 0 < i5 <= i3 and i3 < i3' <= N and 0 < i5' <= i3'; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_9[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 5, i5', i6' = 1] : 0 < i1 <= N and i3 <= N and i5 > 0 and i5 < i5' <= i3; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_5[i0' = 1, i1', i2' = 1, i3', i4' = 2, i5', i6' = 1] : 0 < i3 <= N and 0 < i5 <= i1 and i1 < i1' <= N and 0 < i3' <= N and 0 < i5' <= i1'; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 <= N and i3 > 0 and 0 < i5 <= i1 and i3 < i3' <= N and 0 < i5' <= i1; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 2, i5', i6' = 1] : i1 <= N and 0 < i3 <= N and i5 > 0 and i5 < i5' <= i1; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_3[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : 0 < i3 <= N and 0 < i5 <= i1 and i1 < i1' <= N and 0 < i3' <= N; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_3[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : i1 <= N and i3 > 0 and 0 < i5 <= i1 and i3 < i3' <= N; S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 2, i5', i6' = 0] : i1 <= N and 0 < i3 <= N and 0 < i5' <= i1; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 3, i5 = 1 + i1, i6 = 0] -> S_10[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 6, i5' = 1 + i3, i6' = 0] : 0 < i1 <= N and 0 < i3 <= N; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> S_8[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 5, i5' = -i3 + i3', i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 < i3' <= N; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_5[i0' = 1, i1', i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 > 0 and i3 <= N and 0 < i5 <= i3 and i1 < i1' <= N and 0 < i3' <= N and 0 < i5' <= i1'; S_9[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 1] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 <= N and 0 < i5 <= i3 and i3 < i3' <= N and 0 < i5' <= i1; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 3, i5 = 1 + i1, i6 = 0] -> S_8[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 5, i5', i6' = 0] : 0 < i1 <= N and i3 <= N and 0 < i5' <= i3; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> S_1[i0' = 1, i1', i2' = 0, i3' = 0, i4' = 0, i5' = 0, i6' = 0] : 0 < i1 <= N and i1' > i1 and 0 < i1' <= N; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> S_4[i0' = 1, i1', i2' = 1, i3' = i3, i4' = 2, i5' = -i1 + i1', i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 4, i5' = 1 + i1', i6' = 0] : 0 < i3 <= N and 0 < i5 <= i1 and i1 < i1' <= N and 0 < i3' <= N; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 1] -> S_7[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 4, i5' = 1 + i1, i6' = 0] : i1 <= N and i3 > 0 and 0 < i5 <= i1 and i3 <= i3' <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_3[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_3[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 < i3' <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 4, i5' = 1 + i1', i6' = 0] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_7[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 4, i5' = 1 + i1, i6' = 0] : 0 < i1 <= N and i3 > 0 and i3 <= i3' <= N; S_10[i0 = 1, i1, i2 = 1, i3, i4 = 6, i5 = 1 + i3, i6 = 0] -> S_10[i0' = 1, i1' = 1 + i1, i2' = 1, i3' = 1 + i3, i4' = 6, i5' = 2 + i3, i6' = 0] : 0 < i1 < N and 0 < i3 < N; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 2, i5', i6' = 0] : i1 <= N and 0 < i3 <= N and i5 > 0 and i5 < i5' <= i1; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and 0 < i3' <= N and 0 < i5' <= i1'; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 2, i5', i6' = 1] : i1 <= N and i3 > 0 and i3 <= i3' <= N and 0 < i5' <= i1; S_11[i0 = 1, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] -> S_1[i0' = 1, i1', i2' = 0, i3' = 0, i4' = 0, i5' = 0, i6' = 0] : 0 < i1 <= N and 0 < i3 <= N and i1' > i1 and 0 < i1' <= N; S_8[i0 = 1, i1, i2 = 1, i3, i4 = 5, i5, i6 = 0] -> S_10[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 6, i5' = 1 + i3, i6' = 0] : 0 < i1 <= N and i3 <= N and 0 < i5 <= i3; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_9[i0' = 1, i1', i2' = 1, i3', i4' = 5, i5', i6' = 1] : i1 > 0 and 0 < i3 <= N and i1 < i1' <= N and i3' <= N and 0 < i5' <= i3'; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0] -> S_9[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 5, i5', i6' = 1] : 0 < i1 <= N and i3 > 0 and i3 <= i3' <= N and 0 < i5' <= i3'; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 2, i5, i6 = 0] -> S_10[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 6, i5' = 1 + i3, i6' = 0] : i1 <= N and 0 < i3 <= N and 0 < i5 <= i1 }

#delta:
{ [i0 = 0, i1, i2 = 0, i3, i4, i5, i6 = 3 + i4] : i1 > 0 and -4 <= i4 <= -3 and i5 <= -5 - i4; [i0 = 0, i1, i2 = 0, i3, i4, i5, i6 = i4] : i1 > 0 and -1 <= i4 <= 1; [i0 = 0, i1, i2 = 0, i3, i4, i5, i6 = -3 + i4] : i1 > 0 and 2 <= i4 <= 3 and i5 >= -1 + i1 + i4; [i0 = 0, i1 = 0, i2 = 0, i3, i4, i5, i6 = 3 + i4] : i3 > 0 and -4 <= i4 <= -3 and i5 <= -5 - i4; [i0 = 0, i1, i2 = 0, i3, i4 = 4, i5, i6 = 1] : i1 > 0 and i5 > 0; [i0 = 0, i1, i2 = 0, i3, i4 = -2, i5, i6 = 1] : i1 > 0 and i5 < i1; [i0 = 0, i1 = 0, i2 = 0, i3, i4, i5, i6 = i4] : i3 > 0 and -1 <= i4 <= 0; [i0 = 0, i1, i2 = 0, i3, i4 = 3, i5, i6 = 0] : i1 > 0; [i0 = 0, i1, i2 = 0, i3, i4 = -3, i5, i6 = 0] : i1 > 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4, i5, i6 = -3 + i4] : i3 >= 0 and 3 <= i4 <= 4 and i5 >= 5 - i4; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 1, i5, i6 = 1] : i3 >= 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = -2, i5, i6 = 1] : i3 > 0 and i5 < 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 3, i5, i6 = 0] : i3 >= 0; [i0 = 0, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] : i1 >= 0 and i3 > 0; [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4, i5, i6 = 0] : 0 <= i4 <= 4 and (i4 >= 2 or (i4 <= 1 and i5 > 0)); [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 6, i5, i6 = 0] : i5 >= 2; [i0 = 0, i1, i2 = -1, i3, i4 = -7, i5 = -1 + i3, i6 = 0] : i1 > 0 and i3 < 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = -1, i5, i6 = 0] : i3 > 0 and i5 <= -2 + i3; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = -3, i5, i6 = 0] : i3 > 0; [i0 = 0, i1, i2 = 0, i3 = 0, i4 = -4, i5, i6 = 0] : i1 > 0 and i5 <= -2 + i1; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 2, i5, i6 = -1] : i3 >= 0 and i5 > 0 }

#######################################################################

#######################################################################

#normalized loop (2):

#mapper:
[N] -> { S_14[] -> S_14[i0 = 2, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] }

#domain:
[N] -> { S_14[i0 = 2, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] }

#schedule map:
[N] -> { S_14[i0 = 2, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> [2, 1, 0, 0, 0, 0, 0] }

#writes:
[N] -> {  }

#reads:
[N] -> {  }

#dep_raw:
[N] -> {  }

#dep_waw:
[N] -> {  }

#dep_war:
[N] -> {  }

#relations:
[N] -> {  }

#delta:
[N] -> {  }

#######################################################################

#######################################################################

#normalized loop (3):

#mapper:
[N] -> { S_13[] -> S_13[i0 = 2, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] }

#domain:
[N] -> { S_13[i0 = 2, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] }

#schedule map:
[N] -> { S_13[i0 = 2, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> [2, 0, 0, 0, 0, 0, 0] }

#writes:
[N] -> {  }

#reads:
[N] -> {  }

#dep_raw:
[N] -> {  }

#dep_waw:
[N] -> {  }

#dep_war:
[N] -> {  }

#relations:
[N] -> {  }

#delta:
[N] -> {  }

#######################################################################

#######################################################################

#normalized loop (4):

#mapper:
[N] -> { S_15[] -> S_15[i0 = 2, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] }

#domain:
[N] -> { S_15[i0 = 2, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] }

#schedule map:
[N] -> { S_15[i0 = 2, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] -> [2, 2, 0, 0, 0, 0, 0] }

#writes:
[N] -> {  }

#reads:
[N] -> {  }

#dep_raw:
[N] -> {  }

#dep_waw:
[N] -> {  }

#dep_war:
[N] -> {  }

#relations:
[N] -> {  }

#delta:
[N] -> {  }

#######################################################################

#######################################################################

#normalized loop (0):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#dim [i4]: is order

#dim [i5]: is order

#dim [i6]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [N] -> { S_0[i0, i1, i2, i3, i4, i5, i6] -> [0, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i0, i1, i2, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_0[i0, i1, i2, i3, i4, i5, i6] -> [0, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3, i4, i5, i6] }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_0[] -> [0, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 0, 0, 0, 0, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (1):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 1, i5 = 0, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -1, i5 = 0, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 1, i5 = 0, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -1, i5 = 0, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -3, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -3, i5 = -3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -4, i5 = -1, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -4, i5 = -2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -3, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -3, i5 = -3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -4, i5 = -1, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -4, i5 = -2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 3, i5 = 5, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 3, i5 = 4, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 2, i5 = 4, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 2, i5 = 3, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 3, i5 = 4, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 3, i5 = 3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 2, i5 = 3, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 2, i5 = 2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 4, i5 = 2, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 4, i5 = 1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 4, i5 = 2, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 4, i5 = 1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -2, i5 = 1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -2, i5 = 0, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -2, i5 = -1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -2, i5 = 0, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -2, i5 = -1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = 0, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -1, i5 = 0, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -1, i5 = 0, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -3, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -3, i5 = -3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -4, i5 = -1, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -4, i5 = -2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -3, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -3, i5 = -3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -4, i5 = -1, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -4, i5 = -2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 4, i5 = 2, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 4, i5 = 1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 3, i5 = 3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 3, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 4, i5 = 2, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 4, i5 = 1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 3, i5 = 3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 3, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 1, i5 = 0, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1, i5 = 0, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -2, i5 = -1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -2, i5 = -2, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -2, i5 = -1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -2, i5 = -2, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 1, i3 = 2, i4 = 7, i5 = 3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 1, i3 = 1, i4 = 7, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 2, i4 = 7, i5 = 3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 1, i4 = 7, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 4, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 2, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -1, i3 = -1, i4 = -7, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -1, i3 = -2, i4 = -7, i5 = -3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -1, i3 = -1, i4 = -7, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -1, i3 = -2, i4 = -7, i5 = -3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -1, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -1, i5 = -1, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -1, i5 = -1, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -1, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -4, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = -4, i5 = -1, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -4, i5 = -1, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = -4, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1, i5 = 1, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 1, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 6, i5 = 3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 6, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 2, i5 = 2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 2, i5 = 1, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 2, i5 = 2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 2, i5 = 1, i6 = -1] }

#delta:
{ [i0 = 0, i1, i2 = 0, i3, i4, i5, i6 = 3 + i4] : i1 > 0 and -4 <= i4 <= -3 and i5 <= -5 - i4; [i0 = 0, i1, i2 = 0, i3, i4, i5, i6 = i4] : i1 > 0 and -1 <= i4 <= 1; [i0 = 0, i1, i2 = 0, i3, i4, i5, i6 = -3 + i4] : i1 > 0 and 2 <= i4 <= 3 and i5 >= -1 + i1 + i4; [i0 = 0, i1 = 0, i2 = 0, i3, i4, i5, i6 = 3 + i4] : i3 > 0 and -4 <= i4 <= -3 and i5 <= -5 - i4; [i0 = 0, i1, i2 = 0, i3, i4 = 4, i5, i6 = 1] : i1 > 0 and i5 > 0; [i0 = 0, i1, i2 = 0, i3, i4 = -2, i5, i6 = 1] : i1 > 0 and i5 < i1; [i0 = 0, i1 = 0, i2 = 0, i3, i4, i5, i6 = i4] : i3 > 0 and -1 <= i4 <= 0; [i0 = 0, i1, i2 = 0, i3, i4 = 3, i5, i6 = 0] : i1 > 0; [i0 = 0, i1, i2 = 0, i3, i4 = -3, i5, i6 = 0] : i1 > 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4, i5, i6 = -3 + i4] : i3 >= 0 and 3 <= i4 <= 4 and i5 >= 5 - i4; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 1, i5, i6 = 1] : i3 >= 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = -2, i5, i6 = 1] : i3 > 0 and i5 < 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 3, i5, i6 = 0] : i3 >= 0; [i0 = 0, i1, i2 = 1, i3, i4 = 7, i5 = 1 + i3, i6 = 0] : i1 >= 0 and i3 > 0; [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4, i5, i6 = 0] : 0 <= i4 <= 4 and (i4 >= 2 or (i4 <= 1 and i5 > 0)); [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 6, i5, i6 = 0] : i5 >= 2; [i0 = 0, i1, i2 = -1, i3, i4 = -7, i5 = -1 + i3, i6 = 0] : i1 > 0 and i3 < 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = -1, i5, i6 = 0] : i3 > 0 and i5 <= -2 + i3; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = -3, i5, i6 = 0] : i3 > 0; [i0 = 0, i1, i2 = 0, i3 = 0, i4 = -4, i5, i6 = 0] : i1 > 0 and i5 <= -2 + i1; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 2, i5, i6 = -1] : i3 >= 0 and i5 > 0 }

#dim [i0]: is order

#dim [i1]: is parameter, is positive

#dim [i2]: is order

#dim [i3]: is parameter, is negative, is positive

#dim [i4]: is order

#dim [i5]: is parameter, is negative, is positive

#dim [i6]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 5*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 4*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 5*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 4*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 5*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 4*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 5*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 4*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : a6 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 5*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 1*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 4*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 5*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 4*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -7, a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0, a6 = 0, a7 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0, a6 = 0, a7 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 5*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 4*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : a6 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 5*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 4*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 1*a3 + 2*a4 + 7*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 7*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -7*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 1*a2 + -1*a3 + -2*a4 + -7*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 4*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 3*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane check: hyperplane is empty 

#result: false

#create hyperplanes stop

#create spaces start

#part: [N] -> { [i0, i1, i2, i3, i4, i5, i6] -> [  h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : exists bh0 : 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 + 0 * i5 + 0 * i6 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#spaces mapper: [N] -> { [i0, i1, i2, i3, i4, i5, i6] -> [h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1 }

#create spaces stop

#create tile scop start

#tile scop mapper: [N] -> { S_8[i0, i1, i2, i3, i4, i5, i6] -> S_8[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_5[i0, i1, i2, i3, i4, i5, i6] -> S_5[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_9[i0, i1, i2, i3, i4, i5, i6] -> S_9[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_3[i0, i1, i2, i3, i4, i5, i6] -> S_3[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_12[i0, i1, i2, i3, i4, i5, i6] -> S_12[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_6[i0, i1, i2, i3, i4, i5, i6] -> S_6[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_10[i0, i1, i2, i3, i4, i5, i6] -> S_10[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_4[i0, i1, i2, i3, i4, i5, i6] -> S_4[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_2[i0, i1, i2, i3, i4, i5, i6] -> S_2[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_1[i0, i1, i2, i3, i4, i5, i6] -> S_1[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_11[i0, i1, i2, i3, i4, i5, i6] -> S_11[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1; S_7[i0, i1, i2, i3, i4, i5, i6] -> S_7[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i1 <= 16h0 <= i1 }

#tile scop delta: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4, ii5, ii6 = 3 + ii4] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and -4 <= ii4 <= -3 and ii5 <= -5 - ii4; [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4, ii5, ii6 = ii4] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and -1 <= ii4 <= 1; [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4, ii5, ii6 = -3 + ii4] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and 2 <= ii4 <= 3 and ii5 >= -1 + ii1 + ii4; [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = 4, ii5, ii6 = 1] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii5 > 0; [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = -2, ii5, ii6 = 1] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii5 < ii1; [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = 3, ii5, ii6 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0; [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = -3, ii5, ii6 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4, ii5, ii6 = 3 + ii4] : ii3 > 0 and -4 <= ii4 <= -3 and ii5 <= -5 - ii4; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4, ii5, ii6 = ii4] : ii3 > 0 and -1 <= ii4 <= 0; [h0, ii0 = 0, ii1, ii2 = 1, ii3, ii4 = 7, ii5 = 1 + ii3, ii6 = 0] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 and ii3 > 0; [h0, ii0 = 0, ii1, ii2 = -1, ii3, ii4 = -7, ii5 = -1 + ii3, ii6 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii3 < 0; [h0, ii0 = 0, ii1, ii2 = 0, ii3 = 0, ii4 = -4, ii5, ii6 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii5 <= -2 + ii1; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4, ii5, ii6 = -3 + ii4] : ii3 >= 0 and 3 <= ii4 <= 4 and ii5 >= 5 - ii4; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 1, ii5, ii6 = 1] : ii3 >= 0; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = -2, ii5, ii6 = 1] : ii3 > 0 and ii5 < 0; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 3, ii5, ii6 = 0] : ii3 >= 0; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3 = 0, ii4, ii5, ii6 = 0] : 0 <= ii4 <= 4 and (ii4 >= 2 or (ii4 <= 1 and ii5 > 0)); [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3 = 0, ii4 = 6, ii5, ii6 = 0] : ii5 >= 2; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = -1, ii5, ii6 = 0] : ii3 > 0 and ii5 <= -2 + ii3; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = -3, ii5, ii6 = 0] : ii3 > 0; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 2, ii5, ii6 = -1] : ii3 >= 0 and ii5 > 0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4, ii5, ii6 = 3 + ii4] : ii3 > 0 and -4 <= ii4 <= -3 and ii5 <= -5 - ii4 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = 3, ii5, ii6 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = -3, ii5, ii6 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4, ii5, ii6 = ii4] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and -1 <= ii4 <= 1 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = -3, ii5, ii6 = 0] : ii3 > 0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3 = 0, ii4, ii5, ii6 = 0] : 2 <= ii4 <= 4 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = 4, ii5, ii6 = 1] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii5 > 0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 1, ii5, ii6 = 1] : ii3 >= 0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 3, ii5, ii6 = 0] : ii3 >= 0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4, ii5, ii6 = ii4] : ii3 > 0 and -1 <= ii4 <= 0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3 = 0, ii4, ii5, ii6 = 0] : 0 <= ii4 <= 1 and ii5 > 0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4, ii5, ii6 = -3 + ii4] : ii3 >= 0 and 3 <= ii4 <= 4 and ii5 >= 5 - ii4 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 1, ii3, ii4 = 7, ii5 = 1 + ii3, ii6 = 0] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 and ii3 > 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4, ii5, ii6 = -3 + ii4] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and 2 <= ii4 <= 3 and ii5 >= -1 + ii1 + ii4 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4, ii5, ii6 = 3 + ii4] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and -4 <= ii4 <= -3 and ii5 <= -5 - ii4 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3 = 0, ii4 = -4, ii5, ii6 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii5 <= -2 + ii1 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = -2, ii5, ii6 = 1] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii5 < ii1 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3 = 0, ii4 = 6, ii5, ii6 = 0] : ii5 >= 2 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = -2, ii5, ii6 = 1] : ii3 > 0 and ii5 < 0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = -1, ii5, ii6 = 0] : ii3 > 0 and ii5 <= -2 + ii3 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = -1, ii3, ii4 = -7, ii5 = -1 + ii3, ii6 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii3 < 0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 2, ii5, ii6 = -1] : ii3 >= 0 and ii5 > 0 }

#tile delta: { [h0] : h0 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 2] }

#tile relatiions distance vector set: { [h0 = 1] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1] : exists c1 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and c0 = c1 and a1 != 0} * {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -1, a1 = 1] }

#wafefront hyperplane: { [a1 = 1] }

#calculate wafefront hyperplane stop

#######################################################################

#continue search for hyperplanes

#######################################################################

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = 0, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -1, i5 = 0, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -1, i5 = 0, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -3, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -3, i5 = -3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -4, i5 = -1, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -4, i5 = -2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -3, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -3, i5 = -3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -4, i5 = -1, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -4, i5 = -2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 4, i5 = 2, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 4, i5 = 1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 3, i5 = 3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 3, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 4, i5 = 2, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 4, i5 = 1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 3, i5 = 3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 3, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 1, i5 = 0, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1, i5 = 0, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -3, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -2, i5 = -1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -2, i5 = -2, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -2, i5 = -1, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -2, i5 = -2, i6 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 4, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 2, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -1, i5 = 0, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = -1, i5 = -1, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -1, i5 = -1, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = -1, i5 = -2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 2, i5 = 2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 2, i5 = 1, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 2, i5 = 2, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 2, i5 = 1, i6 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 1, i5 = 1, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 2, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 1, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 6, i5 = 3, i6 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 6, i5 = 2, i6 = 0] }

#delta:
{ [i0 = 0, i1 = 0, i2 = 0, i3, i4, i5, i6 = 3 + i4] : i3 > 0 and -4 <= i4 <= -3 and i5 <= -5 - i4; [i0 = 0, i1 = 0, i2 = 0, i3, i4, i5, i6 = i4] : i3 > 0 and -1 <= i4 <= 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4, i5, i6 = -3 + i4] : i3 >= 0 and 3 <= i4 <= 4 and i5 >= 5 - i4; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 1, i5, i6 = 1] : i3 >= 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = -2, i5, i6 = 1] : i3 > 0 and i5 < 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 3, i5, i6 = 0] : i3 >= 0; [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4, i5, i6 = 0] : 0 <= i4 <= 4 and (i4 >= 2 or (i4 <= 1 and i5 > 0)); [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 6, i5, i6 = 0] : i5 >= 2; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = -1, i5, i6 = 0] : i3 > 0 and i5 <= -2 + i3; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = -3, i5, i6 = 0] : i3 > 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 2, i5, i6 = -1] : i3 >= 0 and i5 > 0 }

#dim [i0]: is wavefront order

#dim [i1]: is wavefront order

#dim [i2]: is wavefront order

#dim [i3]: is parameter, is positive

#dim [i4]: is order

#dim [i5]: is parameter, is negative, is positive

#dim [i6]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : a6 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -7, a1 = 0, a2 = 0, a3 = 0, a4 = 1, a5 = 0, a6 = 0, a7 = 0] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 0, a4 = 1, a5 = 0, a6 = 0, a7 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : a6 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a6 <= 0  and a6 >= 0  and ( 1 = 0  or a4 != 0  or a6 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 0*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -1*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -2*a5 + -2*a6 + 1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 1*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 4*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + 0*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -1*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -2*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -3*a5 + -3*a6 + 0*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 2*a5 + 1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -1*a5 + 0*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -1*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + -4*a5 + -2*a6 + -1*a7 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 6*a5 + 2*a6 + 0*a7 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7] : false }

#hyperplane check: hyperplane is empty 

#result: false

#create hyperplanes stop

#create spaces start

#part: [N] -> { [i0, i1, i2, i3, i4, i5, i6] -> [  ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : exists bh0 : 0 * i0 + 0 * i1 + 0 * i2 + 1 * i3 + 0 * i4 + 0 * i5 + 0 * i6 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#spaces mapper: [N] -> { [i0, i1, i2, i3, i4, i5, i6] -> [ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3 }

#create spaces stop

#create tile scop start

#tile scop mapper: [N] -> { S_8[i0, i1, i2, i3, i4, i5, i6] -> S_8[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_5[i0, i1, i2, i3, i4, i5, i6] -> S_5[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_9[i0, i1, i2, i3, i4, i5, i6] -> S_9[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_3[i0, i1, i2, i3, i4, i5, i6] -> S_3[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_12[i0, i1, i2, i3, i4, i5, i6] -> S_12[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_6[i0, i1, i2, i3, i4, i5, i6] -> S_6[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_10[i0, i1, i2, i3, i4, i5, i6] -> S_10[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_4[i0, i1, i2, i3, i4, i5, i6] -> S_4[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_2[i0, i1, i2, i3, i4, i5, i6] -> S_2[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_1[i0, i1, i2, i3, i4, i5, i6] -> S_1[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_11[i0, i1, i2, i3, i4, i5, i6] -> S_11[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3; S_7[i0, i1, i2, i3, i4, i5, i6] -> S_7[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6] : -15 + i3 <= 16h0 <= i3 }

#tile scop delta: { [ii0 = 0, ii1, ii2 = 0, h0, ii3, ii4, ii5, ii6 = 3 + ii4] : ii1 > 0 and -15 + 16h0 <= ii3 <= 15 + 16h0 and -4 <= ii4 <= -3 and ii5 <= -5 - ii4; [ii0 = 0, ii1, ii2 = 0, h0, ii3, ii4, ii5, ii6 = ii4] : ii1 > 0 and -15 + 16h0 <= ii3 <= 15 + 16h0 and -1 <= ii4 <= 1; [ii0 = 0, ii1, ii2 = 0, h0, ii3, ii4, ii5, ii6 = -3 + ii4] : ii1 > 0 and -15 + 16h0 <= ii3 <= 15 + 16h0 and 2 <= ii4 <= 3 and ii5 >= -1 + ii1 + ii4; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4, ii5, ii6 = 3 + ii4] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 and -4 <= ii4 <= -3 and ii5 <= -5 - ii4; [ii0 = 0, ii1, ii2 = 0, h0, ii3, ii4 = 4, ii5, ii6 = 1] : ii1 > 0 and -15 + 16h0 <= ii3 <= 15 + 16h0 and ii5 > 0; [ii0 = 0, ii1, ii2 = 0, h0, ii3, ii4 = -2, ii5, ii6 = 1] : ii1 > 0 and -15 + 16h0 <= ii3 <= 15 + 16h0 and ii5 < ii1; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4, ii5, ii6 = ii4] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 and -1 <= ii4 <= 0; [ii0 = 0, ii1, ii2 = 0, h0, ii3, ii4 = 3, ii5, ii6 = 0] : ii1 > 0 and -15 + 16h0 <= ii3 <= 15 + 16h0; [ii0 = 0, ii1, ii2 = 0, h0, ii3, ii4 = -3, ii5, ii6 = 0] : ii1 > 0 and -15 + 16h0 <= ii3 <= 15 + 16h0; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4, ii5, ii6 = -3 + ii4] : ii3 >= -15 + 16h0 and 0 <= ii3 <= 15 + 16h0 and 3 <= ii4 <= 4 and ii5 >= 5 - ii4; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 1, ii5, ii6 = 1] : ii3 >= -15 + 16h0 and 0 <= ii3 <= 15 + 16h0; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = -2, ii5, ii6 = 1] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 and ii5 < 0; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 3, ii5, ii6 = 0] : ii3 >= -15 + 16h0 and 0 <= ii3 <= 15 + 16h0; [ii0 = 0, ii1, ii2 = 1, h0, ii3, ii4 = 7, ii5 = 1 + ii3, ii6 = 0] : ii1 >= 0 and ii3 >= 16h0 and 0 < ii3 <= 15 + 16h0; [ii0 = 0, ii1, ii2 = -1, h0, ii3, ii4 = -7, ii5 = -1 + ii3, ii6 = 0] : ii1 > 0 and -15 + 16h0 <= ii3 < 0 and ii3 <= 16h0; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = -1, ii5, ii6 = 0] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 and ii5 <= -2 + ii3; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = -3, ii5, ii6 = 0] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 2, ii5, ii6 = -1] : ii3 >= -15 + 16h0 and 0 <= ii3 <= 15 + 16h0 and ii5 > 0; [ii0 = 0, ii1 = 0, ii2 = 0, h0 = 0, ii3 = 0, ii4, ii5, ii6 = 0] : 0 <= ii4 <= 4 and (ii4 >= 2 or (ii4 <= 1 and ii5 > 0)); [ii0 = 0, ii1 = 0, ii2 = 0, h0 = 0, ii3 = 0, ii4 = 6, ii5, ii6 = 0] : ii5 >= 2; [ii0 = 0, ii1, ii2 = 0, h0 = 0, ii3 = 0, ii4 = -4, ii5, ii6 = 0] : ii1 > 0 and ii5 <= -2 + ii1 }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4, ii5, ii6 = 3 + ii4] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 and -4 <= ii4 <= -3 and ii5 <= -5 - ii4 }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6] : false }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6] : false }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6] : false }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = -3, ii5, ii6 = 0] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0 = 0, ii3 = 0, ii4, ii5, ii6 = 0] : 2 <= ii4 <= 4 }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6] : false }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 1, ii5, ii6 = 1] : ii3 >= -15 + 16h0 and 0 <= ii3 <= 15 + 16h0 }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 3, ii5, ii6 = 0] : ii3 >= -15 + 16h0 and 0 <= ii3 <= 15 + 16h0 }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4, ii5, ii6 = ii4] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 and -1 <= ii4 <= 0 }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0 = 0, ii3 = 0, ii4, ii5, ii6 = 0] : 0 <= ii4 <= 1 and ii5 > 0 }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4, ii5, ii6 = -3 + ii4] : ii3 >= -15 + 16h0 and 0 <= ii3 <= 15 + 16h0 and 3 <= ii4 <= 4 and ii5 >= 5 - ii4 }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6] : false }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6] : false }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6] : false }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6] : false }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6] : false }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0 = 0, ii3 = 0, ii4 = 6, ii5, ii6 = 0] : ii5 >= 2 }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = -2, ii5, ii6 = 1] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 and ii5 < 0 }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6] : false }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = -1, ii5, ii6 = 0] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 and ii5 <= -2 + ii3 }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 2, ii5, ii6 = -1] : ii3 >= -15 + 16h0 and 0 <= ii3 <= 15 + 16h0 and ii5 > 0 }

#tile delta: { [h0] : h0 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 2] }

#tile relatiions distance vector set: { [h0 = 1] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1] : exists c1 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and c0 = c1 and a1 != 0} * {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -1, a1 = 1] }

#wafefront hyperplane: { [a1 = 1] }

#calculate wafefront hyperplane stop

#create wafefront schedule start

#part: [N] -> { S_12[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_11[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_4[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_1[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_2[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_10[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_8[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_9[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_5[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_7[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_3[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_6[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_10[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_5[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_12[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_6[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_1[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_9[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_3[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_11[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_8[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_4[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_7[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6]; S_2[i0, i1, i2, i3, i4, i5, i6] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6] }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_4[i, j, k] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 2, k, 0] : i <= N and 0 < j <= N and 0 < k <= i; S_12[i] -> [1, 1, i, 2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 1 + N, 0, 2 + N, 0] : 0 < i <= N; S_1[i] -> [1, 1, i, 0, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 0, 0, 0, 0] : 0 < i <= N; S_3[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 1, 0, 0] : 0 < i <= N and 0 < j <= N; S_7[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 4, 1 + i, 0] : 0 < i <= N and 0 < j <= N; S_2[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 0, 0] : 0 < i <= N and 0 < j <= N; S_9[i, j, k] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 5, k, 1] : 0 < i <= N and j <= N and 0 < k <= j; S_8[i, j, k] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 5, k, 0] : 0 < i <= N and j <= N and 0 < k <= j; S_5[i, j, k] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 2, k, 1] : i <= N and 0 < j <= N and 0 < k <= i; S_11[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 7, 1 + j, 0] : 0 < i <= N and 0 < j <= N; S_6[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 3, 1 + i, 0] : 0 < i <= N and 0 < j <= N; S_10[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 6, 1 + j, 0] : 0 < i <= N and 0 < j <= N }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (2):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#dim [i4]: is order

#dim [i5]: is order

#dim [i6]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [N] -> { S_14[i0, i1, i2, i3, i4, i5, i6] -> [2, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i0, i1, i2, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_14[i0, i1, i2, i3, i4, i5, i6] -> [2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3, i4, i5, i6] }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_14[] -> [2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 1, 0, 0, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (3):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#dim [i4]: is order

#dim [i5]: is order

#dim [i6]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [N] -> { S_13[i0, i1, i2, i3, i4, i5, i6] -> [3, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i0, i1, i2, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_13[i0, i1, i2, i3, i4, i5, i6] -> [3, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3, i4, i5, i6] }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_13[] -> [3, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 0, 0, 0, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (4):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#dim [i4]: is order

#dim [i5]: is order

#dim [i6]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [N] -> { S_15[i0, i1, i2, i3, i4, i5, i6] -> [4, w0, 0, 0, 0, 0, 0, 0, 0, tw0, i0, i1, i2, i3, i4, i5, i6] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_15[i0, i1, i2, i3, i4, i5, i6] -> [4, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3, i4, i5, i6] }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_15[] -> [4, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 2, 0, 0, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#global schedule:
[N] -> { S_4[i, j, k] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 2, k, 0] : i <= N and 0 < j <= N and 0 < k <= i; S_13[] -> [3, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 0, 0, 0, 0, 0, 0]; S_12[i] -> [1, 1, i, 2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 1 + N, 0, 2 + N, 0] : 0 < i <= N; S_1[i] -> [1, 1, i, 0, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 0, 0, 0, 0] : 0 < i <= N; S_15[] -> [4, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 2, 0, 0, 0, 0, 0]; S_3[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 1, 0, 0] : 0 < i <= N and 0 < j <= N; S_7[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 4, 1 + i, 0] : 0 < i <= N and 0 < j <= N; S_2[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 0, 0] : 0 < i <= N and 0 < j <= N; S_9[i, j, k] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 5, k, 1] : 0 < i <= N and j <= N and 0 < k <= j; S_8[i, j, k] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 5, k, 0] : 0 < i <= N and j <= N and 0 < k <= j; S_5[i, j, k] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 2, k, 1] : i <= N and 0 < j <= N and 0 < k <= i; S_11[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 7, 1 + j, 0] : 0 < i <= N and 0 < j <= N; S_6[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 3, 1 + i, 0] : 0 < i <= N and 0 < j <= N; S_14[] -> [2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 1, 0, 0, 0, 0, 0]; S_0[] -> [0, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 0, 0, 0, 0, 0, 0, 0]; S_10[i, j] -> [1, 1, i, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 6, 1 + j, 0] : 0 < i <= N and 0 < j <= N }

#######################################################################

#######################################################################

#Does global schedule respects oryginal loop RaW deps? -> True

#Does global schedule respects oryginal loop WaW deps? -> True

#Does global schedule respects oryginal loop WaR deps? -> True

#######################################################################
