
//dapt code:
#define min(x,y)    ((x) < (y) ? (x) : (y))
#define max(x,y)    ((x) > (y) ? (x) : (y))

if (N >= 2) {
  for (int w0 = max(-((N + 13) / 16), -((N + 45) / 32)); w0 <= (N - 1) / 32; w0 += 1) {
    #pragma omp parallel for
    for (int h0 = max(-((N + 13) / 16), w0 - (N + 31) / 32 + 1); h0 <= min(min(0, w0), 2 * w0 + 2); h0 += 1) {
      if (N + 16 * h0 <= 2 && 32 * w0 + 31 >= N + 32 * h0) {
        V[N - 2][N - 1] = ((((V[N - 1][N - 2] < EHF[N - 2][N - 1]) ? V[N - 1][N - 2] : EHF[N - 2][N - 1]) < V[N - 2][N - 1]) ? ((V[N - 1][N - 2] < EHF[N - 2][N - 1]) ? V[N - 1][N - 2] : EHF[N - 2][N - 1]) : V[N - 2][N - 1]);
        W[N - 2][N - 1] = ((((((W[N - 1][N - 1] < W[N - 2][N - 2]) ? W[N - 1][N - 1] : W[N - 2][N - 2]) < V[N - 2][N - 1]) ? ((W[N - 1][N - 1] < W[N - 2][N - 2]) ? W[N - 1][N - 1] : W[N - 2][N - 2]) : V[N - 2][N - 1]) < W[N - 2][N - 1]) ? ((((W[N - 1][N - 1] < W[N - 2][N - 2]) ? W[N - 1][N - 1] : W[N - 2][N - 2]) < V[N - 2][N - 1]) ? ((W[N - 1][N - 1] < W[N - 2][N - 2]) ? W[N - 1][N - 1] : W[N - 2][N - 2]) : V[N - 2][N - 1]) : W[N - 2][N - 1]);
      } else if (h0 == 2 * w0 + 2) {
        V[-32 * w0 - 34][-32 * w0 - 33] = ((((V[-32 * w0 - 33][-32 * w0 - 34] < EHF[-32 * w0 - 34][-32 * w0 - 33]) ? V[-32 * w0 - 33][-32 * w0 - 34] : EHF[-32 * w0 - 34][-32 * w0 - 33]) < V[-32 * w0 - 34][-32 * w0 - 33]) ? ((V[-32 * w0 - 33][-32 * w0 - 34] < EHF[-32 * w0 - 34][-32 * w0 - 33]) ? V[-32 * w0 - 33][-32 * w0 - 34] : EHF[-32 * w0 - 34][-32 * w0 - 33]) : V[-32 * w0 - 34][-32 * w0 - 33]);
        W[-32 * w0 - 34][-32 * w0 - 33] = ((((((W[-32 * w0 - 33][-32 * w0 - 33] < W[-32 * w0 - 34][-32 * w0 - 34]) ? W[-32 * w0 - 33][-32 * w0 - 33] : W[-32 * w0 - 34][-32 * w0 - 34]) < V[-32 * w0 - 34][-32 * w0 - 33]) ? ((W[-32 * w0 - 33][-32 * w0 - 33] < W[-32 * w0 - 34][-32 * w0 - 34]) ? W[-32 * w0 - 33][-32 * w0 - 33] : W[-32 * w0 - 34][-32 * w0 - 34]) : V[-32 * w0 - 34][-32 * w0 - 33]) < W[-32 * w0 - 34][-32 * w0 - 33]) ? ((((W[-32 * w0 - 33][-32 * w0 - 33] < W[-32 * w0 - 34][-32 * w0 - 34]) ? W[-32 * w0 - 33][-32 * w0 - 33] : W[-32 * w0 - 34][-32 * w0 - 34]) < V[-32 * w0 - 34][-32 * w0 - 33]) ? ((W[-32 * w0 - 33][-32 * w0 - 33] < W[-32 * w0 - 34][-32 * w0 - 34]) ? W[-32 * w0 - 33][-32 * w0 - 33] : W[-32 * w0 - 34][-32 * w0 - 34]) : V[-32 * w0 - 34][-32 * w0 - 33]) : W[-32 * w0 - 34][-32 * w0 - 33]);
      }
      for (int i0 = max(max(-N + 3, -32 * w0 + 32 * h0 - 29), 16 * h0); i0 <= min(0, 16 * h0 + 15); i0 += 1) {
        if (32 * h0 + 1 >= 32 * w0 + i0) {
          V[-i0][-i0 + 1] = ((((V[-i0 + 1][-i0] < EHF[-i0][-i0 + 1]) ? V[-i0 + 1][-i0] : EHF[-i0][-i0 + 1]) < V[-i0][-i0 + 1]) ? ((V[-i0 + 1][-i0] < EHF[-i0][-i0 + 1]) ? V[-i0 + 1][-i0] : EHF[-i0][-i0 + 1]) : V[-i0][-i0 + 1]);
          W[-i0][-i0 + 1] = ((((((W[-i0 + 1][-i0 + 1] < W[-i0][-i0]) ? W[-i0 + 1][-i0 + 1] : W[-i0][-i0]) < V[-i0][-i0 + 1]) ? ((W[-i0 + 1][-i0 + 1] < W[-i0][-i0]) ? W[-i0 + 1][-i0 + 1] : W[-i0][-i0]) : V[-i0][-i0 + 1]) < W[-i0][-i0 + 1]) ? ((((W[-i0 + 1][-i0 + 1] < W[-i0][-i0]) ? W[-i0 + 1][-i0 + 1] : W[-i0][-i0]) < V[-i0][-i0 + 1]) ? ((W[-i0 + 1][-i0 + 1] < W[-i0][-i0]) ? W[-i0 + 1][-i0 + 1] : W[-i0][-i0]) : V[-i0][-i0 + 1]) : W[-i0][-i0 + 1]);
        }
        for (int i1 = max(32 * w0 - 32 * h0, -i0 + 2); i1 <= min(N - 1, 32 * w0 - 32 * h0 + 31); i1 += 1) {
          {
            for (int i3 = -i0 + 1; i3 < i1; i3 += 1) {
              {
                for (int i5 = max(i0 + i1 + i3 - 29, i3 + 1); i5 < min(i1, i0 + i1 + i3 - 2); i5 += 1) {
                  V[-i0][i1] = (((V[i3][i5] + EFL[-i0][i1]) < V[-i0][i1]) ? (V[i3][i5] + EFL[-i0][i1]) : V[-i0][i1]);
                }
                if (i0 + i3 >= 3) {
                  W[-i0][i1] += ((((W[-i0][i3] < W[i3 + 1][i1]) ? W[-i0][i3] : W[i3 + 1][i1]) < W[-i0][i1]) ? ((W[-i0][i3] < W[i3 + 1][i1]) ? W[-i0][i3] : W[i3 + 1][i1]) : W[-i0][i1]);
                } else {
                  W[-i0][i1] += ((((W[-i0][i3] < W[i3 + 1][i1]) ? W[-i0][i3] : W[i3 + 1][i1]) < W[-i0][i1]) ? ((W[-i0][i3] < W[i3 + 1][i1]) ? W[-i0][i3] : W[i3 + 1][i1]) : W[-i0][i1]);
                }
              }
              if (i1 >= i3 + 2) {
                if (i0 + i3 >= 3) {
                  V[-i0][i1] = (((W[-i0 + 1][i3] + W[i3 + 1][i1 - 1]) < V[-i0][i1]) ? (W[-i0 + 1][i3] + W[i3 + 1][i1 - 1]) : V[-i0][i1]);
                } else {
                  V[-i0][i1] = (((W[-i0 + 1][i3] + W[i3 + 1][i1 - 1]) < V[-i0][i1]) ? (W[-i0 + 1][i3] + W[i3 + 1][i1 - 1]) : V[-i0][i1]);
                }
              }
            }
            if (i0 + i1 >= 30) {
              V[-i0][i1] = ((((V[-i0 + 1][i1 - 1] < EHF[-i0][i1]) ? V[-i0 + 1][i1 - 1] : EHF[-i0][i1]) < V[-i0][i1]) ? ((V[-i0 + 1][i1 - 1] < EHF[-i0][i1]) ? V[-i0 + 1][i1 - 1] : EHF[-i0][i1]) : V[-i0][i1]);
            } else {
              V[-i0][i1] = ((((V[-i0 + 1][i1 - 1] < EHF[-i0][i1]) ? V[-i0 + 1][i1 - 1] : EHF[-i0][i1]) < V[-i0][i1]) ? ((V[-i0 + 1][i1 - 1] < EHF[-i0][i1]) ? V[-i0 + 1][i1 - 1] : EHF[-i0][i1]) : V[-i0][i1]);
            }
          }
          if (i0 + i1 >= 30) {
            W[-i0][i1] = ((((((W[-i0 + 1][i1] < W[-i0][i1 - 1]) ? W[-i0 + 1][i1] : W[-i0][i1 - 1]) < V[-i0][i1]) ? ((W[-i0 + 1][i1] < W[-i0][i1 - 1]) ? W[-i0 + 1][i1] : W[-i0][i1 - 1]) : V[-i0][i1]) < W[-i0][i1]) ? ((((W[-i0 + 1][i1] < W[-i0][i1 - 1]) ? W[-i0 + 1][i1] : W[-i0][i1 - 1]) < V[-i0][i1]) ? ((W[-i0 + 1][i1] < W[-i0][i1 - 1]) ? W[-i0 + 1][i1] : W[-i0][i1 - 1]) : V[-i0][i1]) : W[-i0][i1]);
          } else {
            W[-i0][i1] = ((((((W[-i0 + 1][i1] < W[-i0][i1 - 1]) ? W[-i0 + 1][i1] : W[-i0][i1 - 1]) < V[-i0][i1]) ? ((W[-i0 + 1][i1] < W[-i0][i1 - 1]) ? W[-i0 + 1][i1] : W[-i0][i1 - 1]) : V[-i0][i1]) < W[-i0][i1]) ? ((((W[-i0 + 1][i1] < W[-i0][i1 - 1]) ? W[-i0 + 1][i1] : W[-i0][i1 - 1]) < V[-i0][i1]) ? ((W[-i0 + 1][i1] < W[-i0][i1 - 1]) ? W[-i0 + 1][i1] : W[-i0][i1 - 1]) : V[-i0][i1]) : W[-i0][i1]);
          }
        }
      }
    }
  }
}
