
//dapt code:
#define min(x,y)    ((x) < (y) ? (x) : (y))
#define max(x,y)    ((x) > (y) ? (x) : (y))
#define floord(n,d) (((n)<0) ? -((-(n)+(d)-1)/(d)) : (n)/(d))

for (int w0 = max(max(floord(-N - 14, 32), floord(-N + 2 * l + 2, 32) - 1), floord(-N + l + 16, 32) - 1); w0 < floord(N, 32); w0 += 1) {
  #pragma omp parallel for
  for (int h0 = max(max(-((N + 13) / 16), w0 - (N + 32) / 32 + 1), -((N - l + 15) / 16)); h0 <= min(min(-1, 2 * w0 + 2), 2 * w0 + floord(-l - 2, 16) + 3); h0 += 1) {
    for (int i0 = max(max(max(max(-N + 2, -N + l), l - 32 * w0 + 32 * h0 - 31), -32 * w0 + 32 * h0 - 29), 16 * h0); i0 <= 16 * h0 + 15; i0 += 1) {
      for (int i1 = max(max(32 * w0 - 32 * h0, l - i0), -i0 + 2); i1 <= min(N, 32 * w0 - 32 * h0 + 31); i1 += 1) {
        for (int i2 = -i0; i2 <= -l + i1; i2 += 1) {
          ck[-i0][i1] += ((ck[-i0][i1 - 1] + paired((i2), (i1))) ? (ck[-i0][i2 - 1] + ck[i2 + 1][i1 - 1]) : 0);
        }
      }
    }
  }
}
