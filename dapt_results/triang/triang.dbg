
#######################################################################

#oryginal loop:

#schedule:
{ domain: "[N] -> { S_6[gap, j, k] : gap <= j < N and -gap + j < k < j; S_7[gap, j] : gap >= 0 and gap <= j < N; S_5[gap, j, k] : gap <= j < N and -gap + j < k < j; S_3[gap, j] : gap >= 2 and gap <= j < N; S_9[]; S_11[]; S_10[]; S_1[gap] : 0 <= gap < N; S_0[]; S_2[gap, j] : 0 <= gap <= 1 and gap <= j < N; S_8[gap] : 0 <= gap < N; S_4[gap, j] : gap >= 2 and gap <= j < N }", child: { sequence: [ { filter: "[N] -> { S_0[] }" }, { filter: "[N] -> { S_6[gap, j, k]; S_7[gap, j]; S_5[gap, j, k]; S_3[gap, j]; S_1[gap]; S_2[gap, j]; S_8[gap]; S_4[gap, j] }", child: { schedule: "[N] -> L_0[{ S_6[gap, j, k] -> [(gap)]; S_7[gap, j] -> [(gap)]; S_5[gap, j, k] -> [(gap)]; S_3[gap, j] -> [(gap)]; S_1[gap] -> [(gap)]; S_2[gap, j] -> [(gap)]; S_8[gap] -> [(gap)]; S_4[gap, j] -> [(gap)] }]", child: { sequence: [ { filter: "[N] -> { S_1[gap] }" }, { filter: "[N] -> { S_6[gap, j, k]; S_7[gap, j]; S_5[gap, j, k]; S_3[gap, j]; S_2[gap, j]; S_4[gap, j] }", child: { schedule: "[N] -> L_1[{ S_6[gap, j, k] -> [(j)]; S_7[gap, j] -> [(j)]; S_5[gap, j, k] -> [(j)]; S_3[gap, j] -> [(j)]; S_2[gap, j] -> [(j)]; S_4[gap, j] -> [(j)] }]", child: { sequence: [ { filter: "[N] -> { S_6[gap, j, k]; S_5[gap, j, k]; S_3[gap, j]; S_2[gap, j]; S_4[gap, j] }", child: { set: [ { filter: "[N] -> { S_2[gap, j] }" }, { filter: "[N] -> { S_6[gap, j, k]; S_5[gap, j, k]; S_3[gap, j]; S_4[gap, j] }", child: { sequence: [ { filter: "[N] -> { S_3[gap, j] }" }, { filter: "[N] -> { S_4[gap, j] }" }, { filter: "[N] -> { S_6[gap, j, k]; S_5[gap, j, k] }", child: { schedule: "[N] -> L_2[{ S_6[gap, j, k] -> [(k)]; S_5[gap, j, k] -> [(k)] }]", child: { sequence: [ { filter: "[N] -> { S_5[gap, j, k] }" }, { filter: "[N] -> { S_6[gap, j, k] }" } ] } } } ] } } ] } }, { filter: "[N] -> { S_7[gap, j] }" } ] } } }, { filter: "[N] -> { S_8[gap] }" } ] } } }, { filter: "[N] -> { S_9[]; S_11[]; S_10[] }", child: { set: [ { filter: "{ S_9[] }" }, { filter: "{ S_10[] }" }, { filter: "{ S_11[] }" } ] } } ] } }

#domain:
[N] -> { S_6[gap, j, k] : gap <= j < N and -gap + j < k < j; S_7[gap, j] : gap >= 0 and gap <= j < N; S_5[gap, j, k] : gap <= j < N and -gap + j < k < j; S_3[gap, j] : gap >= 2 and gap <= j < N; S_9[]; S_11[]; S_10[]; S_1[gap] : 0 <= gap < N; S_0[]; S_2[gap, j] : 0 <= gap <= 1 and gap <= j < N; S_8[gap] : 0 <= gap < N; S_4[gap, j] : gap >= 2 and gap <= j < N }

#schedule map:
[N] -> { S_7[gap, j] -> [1, gap, 1, j, 1, 0, 0, 0, 0]; S_1[gap] -> [1, gap, 0, 0, 0, 0, 0, 0, 0]; S_8[gap] -> [1, gap, 2, 0, 0, 0, 0, 0, 0]; S_3[gap, j] -> [1, gap, 1, j, 0, 1, 0, 0, 0]; S_11[] -> [2, 2, 0, 0, 0, 0, 0, 0, 0]; S_10[] -> [2, 1, 0, 0, 0, 0, 0, 0, 0]; S_5[gap, j, k] -> [1, gap, 1, j, 0, 1, 2, k, 0]; S_9[] -> [2, 0, 0, 0, 0, 0, 0, 0, 0]; S_4[gap, j] -> [1, gap, 1, j, 0, 1, 1, 0, 0]; S_2[gap, j] -> [1, gap, 1, j, 0, 0, 0, 0, 0]; S_6[gap, j, k] -> [1, gap, 1, j, 0, 1, 2, k, 1]; S_0[] -> [0, 0, 0, 0, 0, 0, 0, 0, 0] }

#isl schedule:
{ domain: "[N] -> { S_6[gap, j, k] : gap <= j < N and -gap + j < k < j; S_7[gap, j] : gap >= 0 and gap <= j < N; S_5[gap, j, k] : gap <= j < N and -gap + j < k < j; S_3[gap, j] : gap >= 2 and gap <= j < N; S_9[]; S_11[]; S_10[]; S_1[gap] : 0 <= gap < N; S_0[]; S_2[gap, j] : 0 <= gap <= 1 and gap <= j < N; S_8[gap] : 0 <= gap < N; S_4[gap, j] : gap >= 2 and gap <= j < N }", child: { set: [ { filter: "[N] -> { S_6[gap, j, k]; S_4[gap, j] }", child: { schedule: "[N] -> [{ S_6[gap, j, k] -> [(gap)]; S_4[gap, j] -> [(gap)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[N] -> [{ S_6[gap, j, k] -> [(j)]; S_4[gap, j] -> [(j)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[N] -> [{ S_6[gap, j, k] -> [(k)]; S_4[gap, j] -> [(0)] }]", permutable: 1, coincident: [ 1 ] } } } }, { filter: "[N] -> { S_0[]; S_8[gap] }", child: { schedule: "[N] -> [{ S_0[] -> [(0)]; S_8[gap] -> [(gap)] }]", permutable: 1, coincident: [ 1 ], child: { sequence: [ { filter: "[N] -> { S_0[] }" }, { filter: "[N] -> { S_8[gap] }" } ] } } }, { filter: "[N] -> { S_5[gap, j, k]; S_3[gap, j]; S_2[gap, j] }", child: { sequence: [ { filter: "[N] -> { S_2[gap, j] }", child: { schedule: "[N] -> [{ S_2[gap, j] -> [(gap)] }, { S_2[gap, j] -> [(j)] }]", permutable: 1, coincident: [ 1, 1 ] } }, { filter: "[N] -> { S_3[gap, j] }", child: { schedule: "[N] -> [{ S_3[gap, j] -> [(gap)] }, { S_3[gap, j] -> [(j)] }]", permutable: 1, coincident: [ 1, 1 ] } }, { filter: "[N] -> { S_5[gap, j, k] }", child: { schedule: "[N] -> [{ S_5[gap, j, k] -> [(gap)] }, { S_5[gap, j, k] -> [(j)] }]", permutable: 1, coincident: [ 1, 1 ], child: { schedule: "[N] -> [{ S_5[gap, j, k] -> [(k)] }]", permutable: 1, coincident: [ 1 ] } } } ] } }, { filter: "[N] -> { S_7[gap, j]; S_1[gap] }", child: { schedule: "[N] -> [{ S_7[gap, j] -> [(gap)]; S_1[gap] -> [(gap)] }]", permutable: 1, coincident: [ 1 ], child: { schedule: "[N] -> [{ S_7[gap, j] -> [(j)]; S_1[gap] -> [(0)] }]", permutable: 1, coincident: [ 1 ], child: { sequence: [ { filter: "[N] -> { S_1[gap] }" }, { filter: "[N] -> { S_7[gap, j] }" } ] } } } }, { filter: "[N] -> { S_10[] }" }, { filter: "[N] -> { S_11[] }" }, { filter: "[N] -> { S_9[] }" } ] } }

#isl schedule map:
[N] -> { S_7[gap, j] -> [3, gap, j, 1, 0]; S_11[] -> [5, 0, 0, 0, 0]; S_5[gap, j, k] -> [2, 2, gap, j, k]; S_3[gap, j] -> [2, 1, gap, j, 0]; S_0[] -> [1, 0, 0, 0, 0]; S_10[] -> [4, 0, 0, 0, 0]; S_9[] -> [6, 0, 0, 0, 0]; S_6[gap, j, k] -> [0, gap, j, k, 0]; S_8[gap] -> [1, gap, 1, 0, 0]; S_4[gap, j] -> [0, gap, j, 0, 0]; S_2[gap, j] -> [2, 0, gap, j, 0]; S_1[gap] -> [3, gap, 0, 0, 0] }

#writes:
[N] -> { S_2[gap, j] -> table[-gap + j, j] : 0 <= gap <= 1 and j >= gap and 0 <= j < N; S_5[gap, j, k] -> table[-gap + j, j] : j >= gap and 0 <= j < N and -gap + j < k < j; S_7[gap, j] -> j[] : gap >= 0 and gap <= j < N; S_0[] -> gap[]; S_6[gap, j, k] -> k[] : gap <= j < N and -gap + j < k < j; S_8[gap] -> gap[] : 0 <= gap < N; S_3[gap, j] -> table[-gap + j, j] : gap >= 2 and j >= gap and 0 <= j < N; S_4[gap, j] -> k[] : gap >= 2 and gap <= j < N; S_1[gap] -> j[] : 0 <= gap < N }

#reads:
[N] -> { S_5[gap, j, k] -> table[k, j] : gap <= j < N and -gap + j < k < j; S_5[gap, j, k] -> table[-gap + j, k] : gap <= j < N and k >= 0 and -gap + j < k < j; S_5[gap, j, k] -> table[-gap + j, j] : j >= gap and 0 <= j < N and -gap + j < k < j }

#dep_raw:
[N] -> { S_3[gap, j] -> S_5[gap', j' = -gap + j + gap', k = j] : gap >= 2 and j >= gap and gap < gap' < N + gap - j; S_3[gap, j] -> S_5[gap' = gap, j' = j, k] : gap <= j < N and -gap + j < k < j; S_3[gap, j] -> S_5[gap', j' = j, k = -gap + j] : gap >= 2 and j < N and gap < gap' <= j; S_5[gap, j, k] -> S_5[gap', j' = -gap + j + gap', k' = j] : j >= gap and -gap + j < k < j and gap < gap' < N + gap - j; S_5[gap, j, k] -> S_5[gap' = gap, j' = j, k'] : gap <= j < N and k > -gap + j and k < k' < j; S_5[gap, j, k] -> S_5[gap', j' = j, k' = -gap + j] : j < N and -gap + j < k < j and gap < gap' <= j; S_2[gap = 1, j] -> S_5[gap', j' = -1 + j + gap', k = j] : j > 0 and 2 <= gap' <= N - j; S_2[gap = 1, j] -> S_5[gap', j' = j, k = -1 + j] : j < N and 2 <= gap' <= j }

#dep_waw:
[N] -> { S_8[gap] -> S_8[gap'] : gap >= 0 and gap < gap' < N; S_3[gap, j] -> S_5[gap' = gap, j' = j, k] : gap <= j < N and -gap + j < k < j; S_0[] -> S_8[gap] : 0 <= gap < N; S_1[gap] -> S_7[gap', j] : gap >= 0 and gap' >= gap and gap' <= j < N; S_7[gap, j] -> S_1[gap'] : gap >= 0 and gap <= j < N and gap < gap' < N; S_7[gap, j] -> S_7[gap', j'] : gap >= 0 and gap <= j < N and gap' > gap and gap' <= j' < N; S_7[gap, j] -> S_7[gap' = gap, j'] : gap >= 0 and j >= gap and j < j' < N; S_6[gap, j, k] -> S_6[gap', j', k'] : gap <= j < N and -gap + j < k < j and gap' > gap and gap' <= j' < N and -gap' + j' < k' < j'; S_6[gap, j, k] -> S_6[gap' = gap, j', k'] : j >= gap and -gap + j < k < j and j < j' < N and -gap + j' < k' < j'; S_6[gap, j, k] -> S_6[gap' = gap, j' = j, k'] : gap <= j < N and k > -gap + j and k < k' < j; S_4[gap, j] -> S_4[gap', j'] : gap >= 2 and gap <= j < N and gap' > gap and gap' <= j' < N; S_4[gap, j] -> S_4[gap' = gap, j'] : gap >= 2 and j >= gap and j < j' < N; S_1[gap] -> S_1[gap'] : gap >= 0 and gap < gap' < N; S_6[gap, j, k] -> S_4[gap', j'] : gap <= j < N and -gap + j < k < j and gap' > gap and gap' <= j' < N; S_6[gap, j, k] -> S_4[gap' = gap, j'] : j >= gap and -gap + j < k < j and j < j' < N; S_4[gap, j] -> S_6[gap', j', k] : gap >= 2 and gap <= j < N and gap' > gap and gap' <= j' < N and -gap' + j' < k < j'; S_4[gap, j] -> S_6[gap' = gap, j', k] : j >= gap and j <= j' < N and -gap + j' < k < j'; S_5[gap, j, k] -> S_5[gap' = gap, j' = j, k'] : gap <= j < N and k > -gap + j and k < k' < j }

#dep_war:
[N] -> { S_5[gap, j, k] -> S_5[gap' = gap, j' = j, k'] : gap <= j < N and k > -gap + j and k < k' < j }

#relations:
[N] -> { S_8[gap] -> S_8[gap'] : gap >= 0 and gap < gap' < N; S_2[gap = 1, j] -> S_5[gap', j' = -1 + j + gap', k = j] : j > 0 and 2 <= gap' <= N - j; S_2[gap = 1, j] -> S_5[gap', j' = j, k = -1 + j] : j < N and 2 <= gap' <= j; S_3[gap, j] -> S_5[gap', j' = -gap + j + gap', k = j] : gap >= 2 and j >= gap and gap < gap' < N + gap - j; S_3[gap, j] -> S_5[gap' = gap, j' = j, k] : gap <= j < N and -gap + j < k < j; S_3[gap, j] -> S_5[gap', j' = j, k = -gap + j] : gap >= 2 and j < N and gap < gap' <= j; S_0[] -> S_8[gap] : 0 <= gap < N; S_1[gap] -> S_7[gap', j] : gap >= 0 and gap' >= gap and gap' <= j < N; S_7[gap, j] -> S_1[gap'] : gap >= 0 and gap <= j < N and gap < gap' < N; S_7[gap, j] -> S_7[gap', j'] : gap >= 0 and gap <= j < N and gap' > gap and gap' <= j' < N; S_7[gap, j] -> S_7[gap' = gap, j'] : gap >= 0 and j >= gap and j < j' < N; S_6[gap, j, k] -> S_6[gap', j', k'] : gap <= j < N and -gap + j < k < j and gap' > gap and gap' <= j' < N and -gap' + j' < k' < j'; S_6[gap, j, k] -> S_6[gap' = gap, j', k'] : j >= gap and -gap + j < k < j and j < j' < N and -gap + j' < k' < j'; S_6[gap, j, k] -> S_6[gap' = gap, j' = j, k'] : gap <= j < N and k > -gap + j and k < k' < j; S_4[gap, j] -> S_4[gap', j'] : gap >= 2 and gap <= j < N and gap' > gap and gap' <= j' < N; S_4[gap, j] -> S_4[gap' = gap, j'] : gap >= 2 and j >= gap and j < j' < N; S_1[gap] -> S_1[gap'] : gap >= 0 and gap < gap' < N; S_6[gap, j, k] -> S_4[gap', j'] : gap <= j < N and -gap + j < k < j and gap' > gap and gap' <= j' < N; S_6[gap, j, k] -> S_4[gap' = gap, j'] : j >= gap and -gap + j < k < j and j < j' < N; S_4[gap, j] -> S_6[gap', j', k] : gap >= 2 and gap <= j < N and gap' > gap and gap' <= j' < N and -gap' + j' < k < j'; S_4[gap, j] -> S_6[gap' = gap, j', k] : j >= gap and j <= j' < N and -gap + j' < k < j'; S_5[gap, j, k] -> S_5[gap', j' = -gap + j + gap', k' = j] : j >= gap and -gap + j < k < j and gap < gap' < N + gap - j; S_5[gap, j, k] -> S_5[gap' = gap, j' = j, k'] : gap <= j < N and k > -gap + j and k < k' < j; S_5[gap, j, k] -> S_5[gap', j' = j, k' = -gap + j] : j < N and -gap + j < k < j and gap < gap' <= j }

#delta:
{ [gap] : gap > 0; [gap, j, k] : gap > 0; [gap = 0, j, k] : j > 0; [gap = 0, j = 0, k] : k > 0; [gap, j] : gap > 0; [gap = 0, j] : j > 0 }

#######################################################################

#######################################################################

#norm schedule map:
[N] -> { S_0[] -> [0, 0, 0, 0, 0, 0, 0, 0, 0]; S_1[gap] -> [1, gap, 0, 0, 0, 0, 0, 0, 0]; S_8[gap] -> [1, gap, 2, 0, 0, 0, 0, 0, 0]; S_3[gap, j] -> [1, gap, 1, j, 0, 1, 0, 0, 0]; S_11[] -> [2, 2, 0, 0, 0, 0, 0, 0, 0]; S_10[] -> [2, 1, 0, 0, 0, 0, 0, 0, 0]; S_5[gap, j, k] -> [1, gap, 1, j, 0, 1, 2, k, 0]; S_9[] -> [2, 0, 0, 0, 0, 0, 0, 0, 0]; S_4[gap, j] -> [1, gap, 1, j, 0, 1, 1, 0, 0]; S_2[gap, j] -> [1, gap, 1, j, 0, 0, 0, 0, 0]; S_6[gap, j, k] -> [1, gap, 1, j, 0, 1, 2, k, 1]; S_7[gap, j] -> [1, gap, 1, j, 1, 0, 0, 0, 0] }

#######################################################################

#######################################################################

#normalized loop (0):

#mapper:
[N] -> { S_0[] -> S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#domain:
[N] -> { S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#schedule map:
[N] -> { S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> [0, 0, 0, 0, 0, 0, 0, 0, 0] }

#writes:
[N] -> { S_0[i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> gap[] }

#reads:
[N] -> {  }

#dep_raw:
[N] -> {  }

#dep_waw:
[N] -> {  }

#dep_war:
[N] -> {  }

#relations:
[N] -> {  }

#delta:
[N] -> {  }

#######################################################################

#######################################################################

#normalized loop (1):

#mapper:
[N] -> { S_7[gap, j] -> S_7[i0 = 1, i1 = gap, i2 = 1, i3 = j, i4 = 1, i5 = 0, i6 = 0, i7 = j, i8 = 0]; S_2[gap, j] -> S_2[i0 = 1, i1 = gap, i2 = 1, i3 = j, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0]; S_5[gap, j, k] -> S_5[i0 = 1, i1 = gap, i2 = 1, i3 = j, i4 = 0, i5 = 1, i6 = 2, i7 = k, i8 = 0]; S_1[gap] -> S_1[i0 = 1, i1 = gap, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0]; S_6[gap, j, k] -> S_6[i0 = 1, i1 = gap, i2 = 1, i3 = j, i4 = 0, i5 = 1, i6 = 2, i7 = k, i8 = 1]; S_4[gap, j] -> S_4[i0 = 1, i1 = gap, i2 = 1, i3 = j, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0]; S_8[gap] -> S_8[i0 = 1, i1 = gap, i2 = 2, i3 = N, i4 = 0, i5 = 0, i6 = 0, i7 = N, i8 = 0]; S_3[gap, j] -> S_3[i0 = 1, i1 = gap, i2 = 1, i3 = j, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] }

#domain:
[N] -> { S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] : i1 >= 2 and i1 <= i3 < N; S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] : 0 <= i1 <= 1 and i1 <= i3 < N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] : i1 >= 0 and i1 <= i3 < N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] : i1 >= 2 and i1 <= i3 < N; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] : i1 <= i3 < N and -i1 + i3 < i7 < i3; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] : 0 <= i1 < N; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] : i1 <= i3 < N and -i1 + i3 < i7 < i3; S_8[i0 = 1, i1, i2 = 2, i3 = N, i4 = 0, i5 = 0, i6 = 0, i7 = N, i8 = 0] : 0 <= i1 < N }

#schedule map:
[N] -> { S_8[i0 = 1, i1, i2 = 2, i3 = N, i4 = 0, i5 = 0, i6 = 0, i7 = N, i8 = 0] -> [1, i1, 2, 0, 0, 0, 0, 0, 0]; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> [1, i1, 0, 0, 0, 0, 0, 0, 0]; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] -> [1, i1, 1, i3, 0, 1, 1, 0, 0]; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] -> [1, i1, 1, i3, 0, 1, 0, 0, 0]; S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> [1, i1, 1, i3, 0, 0, 0, 0, 0]; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] -> [1, i1, 1, i3, 1, 0, 0, 0, 0]; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> [1, i1, 1, i3, 0, 1, 2, i7, 1]; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> [1, i1, 1, i3, 0, 1, 2, i7, 0] }

#writes:
[N] -> { S_2[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> table[-i1 + i3, i3] : 0 <= i1 <= 1 and i3 >= i1 and 0 <= i3 < N; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> k[] : i1 <= i3 < N and -i1 + i3 < i7 < i3; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] -> j[] : i1 >= 0 and i1 <= i3 < N; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> j[] : 0 <= i1 < N; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> table[-i1 + i3, i3] : i3 >= i1 and 0 <= i3 < N and -i1 + i3 < i7 < i3; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] -> table[-i1 + i3, i3] : i1 >= 2 and i3 >= i1 and 0 <= i3 < N; S_8[i0 = 1, i1, i2 = 2, i3 = N, i4 = 0, i5 = 0, i6 = 0, i7 = N, i8 = 0] -> gap[] : 0 <= i1 < N; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] -> k[] : i1 >= 2 and i1 <= i3 < N }

#reads:
[N] -> { S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> table[i7, i3] : i1 <= i3 < N and -i1 + i3 < i7 < i3; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> table[-i1 + i3, i7] : i1 <= i3 < N and i7 >= 0 and -i1 + i3 < i7 < i3; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> table[-i1 + i3, i3] : i3 >= i1 and 0 <= i3 < N and -i1 + i3 < i7 < i3 }

#dep_raw:
[N] -> { S_3[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7', i8' = 0] : i1 <= i3 < N and -i1 + i3 < i7' < i3; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = -i1 + i3 + i1', i4' = 0, i5' = 1, i6' = 2, i7' = i3, i8' = 0] : i1 >= 2 and i3 >= i1 and i1 < i1' < N + i1 - i3; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7' = -i1 + i3, i8' = 0] : i1 >= 2 and i3 < N and i1 < i1' <= i3; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7', i8' = 0] : i1 <= i3 < N and i7 > -i1 + i3 and i7 < i7' < i3; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = -i1 + i3 + i1', i4' = 0, i5' = 1, i6' = 2, i7' = i3, i8' = 0] : i3 >= i1 and -i1 + i3 < i7 < i3 and i1 < i1' < N + i1 - i3; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7' = -i1 + i3, i8' = 0] : i3 < N and -i1 + i3 < i7 < i3 and i1 < i1' <= i3; S_2[i0 = 1, i1 = 1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = -1 + i3 + i1', i4' = 0, i5' = 1, i6' = 2, i7' = i3, i8' = 0] : i3 > 0 and 2 <= i1' <= N - i3; S_2[i0 = 1, i1 = 1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7' = -1 + i3, i8' = 0] : i3 < N and 2 <= i1' <= i3 }

#dep_waw:
[N] -> { S_7[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0, i7' = i3', i8' = 0] : i1 >= 0 and i1 <= i3 < N and i1' > i1 and i1' <= i3' < N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] -> S_7[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0, i7' = i3', i8' = 0] : i1 >= 0 and i3 >= i1 and i3 < i3' < N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7', i8' = 0] : i1 <= i3 < N and -i1 + i3 < i7' < i3; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> S_1[i0' = 1, i1', i2' = 0, i3' = 0, i4' = 0, i5' = 0, i6' = 0, i7' = 0, i8' = 0] : 0 <= i1 < N and i1' > i1 and 0 <= i1' < N; S_8[i0 = 1, i1, i2 = 2, i3 = N, i4 = 0, i5 = 0, i6 = 0, i7 = N, i8 = 0] -> S_8[i0' = 1, i1', i2' = 2, i3' = N, i4' = 0, i5' = 0, i6' = 0, i7' = N, i8' = 0] : 0 <= i1 < N and i1' > i1 and 0 <= i1' < N; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7', i8' = 0] : i1 <= i3 < N and i7 > -i1 + i3 and i7 < i7' < i3; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] -> S_6[i0' = 1, i1', i2' = 1, i3', i4' = 0, i5' = 1, i6' = 2, i7', i8' = 1] : i1 >= 2 and i1 <= i3 < N and i1' > i1 and i1' <= i3' < N and -i1' + i3' < i7' < i3'; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] -> S_6[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 0, i5' = 1, i6' = 2, i7', i8' = 1] : i3 >= i1 and i3 <= i3' < N and -i1 + i3' < i7' < i3'; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> S_6[i0' = 1, i1', i2' = 1, i3', i4' = 0, i5' = 1, i6' = 2, i7', i8' = 1] : i1 <= i3 < N and -i1 + i3 < i7 < i3 and i1' > i1 and i1' <= i3' < N and -i1' + i3' < i7' < i3'; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> S_6[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 0, i5' = 1, i6' = 2, i7', i8' = 1] : i3 >= i1 and -i1 + i3 < i7 < i3 and i3 < i3' < N and -i1 + i3' < i7' < i3'; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> S_6[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7', i8' = 1] : i1 <= i3 < N and i7 > -i1 + i3 and i7 < i7' < i3; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> S_4[i0' = 1, i1', i2' = 1, i3', i4' = 0, i5' = 1, i6' = 1, i7' = 0, i8' = 0] : i1 <= i3 < N and -i1 + i3 < i7 < i3 and i1' > i1 and i1' <= i3' < N; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 0, i5' = 1, i6' = 1, i7' = 0, i8' = 0] : i3 >= i1 and -i1 + i3 < i7 < i3 and i3 < i3' < N; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] -> S_4[i0' = 1, i1', i2' = 1, i3', i4' = 0, i5' = 1, i6' = 1, i7' = 0, i8' = 0] : i1 >= 2 and i1 <= i3 < N and i1' > i1 and i1' <= i3' < N; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 0, i5' = 1, i6' = 1, i7' = 0, i8' = 0] : i1 >= 2 and i3 >= i1 and i3 < i3' < N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] -> S_1[i0' = 1, i1', i2' = 0, i3' = 0, i4' = 0, i5' = 0, i6' = 0, i7' = 0, i8' = 0] : i1 >= 0 and i1 <= i3 < N and i1' > i1 and 0 <= i1' < N; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0, i7' = i3', i8' = 0] : i1 >= 0 and i1' >= i1 and i1' <= i3' < N }

#dep_war:
[N] -> { S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7', i8' = 0] : i1 <= i3 < N and i7 > -i1 + i3 and i7 < i7' < i3 }

#relations:
[N] -> { S_7[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0, i7' = i3', i8' = 0] : i1 >= 0 and i1 <= i3 < N and i1' > i1 and i1' <= i3' < N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] -> S_7[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0, i7' = i3', i8' = 0] : i1 >= 0 and i3 >= i1 and i3 < i3' < N; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7', i8' = 0] : i1 <= i3 < N and -i1 + i3 < i7' < i3; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = -i1 + i3 + i1', i4' = 0, i5' = 1, i6' = 2, i7' = i3, i8' = 0] : i1 >= 2 and i3 >= i1 and i1 < i1' < N + i1 - i3; S_3[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7' = -i1 + i3, i8' = 0] : i1 >= 2 and i3 < N and i1 < i1' <= i3; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> S_1[i0' = 1, i1', i2' = 0, i3' = 0, i4' = 0, i5' = 0, i6' = 0, i7' = 0, i8' = 0] : 0 <= i1 < N and i1' > i1 and 0 <= i1' < N; S_8[i0 = 1, i1, i2 = 2, i3 = N, i4 = 0, i5 = 0, i6 = 0, i7 = N, i8 = 0] -> S_8[i0' = 1, i1', i2' = 2, i3' = N, i4' = 0, i5' = 0, i6' = 0, i7' = N, i8' = 0] : 0 <= i1 < N and i1' > i1 and 0 <= i1' < N; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> S_5[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7', i8' = 0] : i1 <= i3 < N and i7 > -i1 + i3 and i7 < i7' < i3; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = -i1 + i3 + i1', i4' = 0, i5' = 1, i6' = 2, i7' = i3, i8' = 0] : i3 >= i1 and -i1 + i3 < i7 < i3 and i1 < i1' < N + i1 - i3; S_5[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7' = -i1 + i3, i8' = 0] : i3 < N and -i1 + i3 < i7 < i3 and i1 < i1' <= i3; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] -> S_6[i0' = 1, i1', i2' = 1, i3', i4' = 0, i5' = 1, i6' = 2, i7', i8' = 1] : i1 >= 2 and i1 <= i3 < N and i1' > i1 and i1' <= i3' < N and -i1' + i3' < i7' < i3'; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] -> S_6[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 0, i5' = 1, i6' = 2, i7', i8' = 1] : i3 >= i1 and i3 <= i3' < N and -i1 + i3' < i7' < i3'; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> S_6[i0' = 1, i1', i2' = 1, i3', i4' = 0, i5' = 1, i6' = 2, i7', i8' = 1] : i1 <= i3 < N and -i1 + i3 < i7 < i3 and i1' > i1 and i1' <= i3' < N and -i1' + i3' < i7' < i3'; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> S_6[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 0, i5' = 1, i6' = 2, i7', i8' = 1] : i3 >= i1 and -i1 + i3 < i7 < i3 and i3 < i3' < N and -i1 + i3' < i7' < i3'; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> S_6[i0' = 1, i1' = i1, i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7', i8' = 1] : i1 <= i3 < N and i7 > -i1 + i3 and i7 < i7' < i3; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> S_4[i0' = 1, i1', i2' = 1, i3', i4' = 0, i5' = 1, i6' = 1, i7' = 0, i8' = 0] : i1 <= i3 < N and -i1 + i3 < i7 < i3 and i1' > i1 and i1' <= i3' < N; S_6[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 2, i7, i8 = 1] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 0, i5' = 1, i6' = 1, i7' = 0, i8' = 0] : i3 >= i1 and -i1 + i3 < i7 < i3 and i3 < i3' < N; S_2[i0 = 1, i1 = 1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = -1 + i3 + i1', i4' = 0, i5' = 1, i6' = 2, i7' = i3, i8' = 0] : i3 > 0 and 2 <= i1' <= N - i3; S_2[i0 = 1, i1 = 1, i2 = 1, i3, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> S_5[i0' = 1, i1', i2' = 1, i3' = i3, i4' = 0, i5' = 1, i6' = 2, i7' = -1 + i3, i8' = 0] : i3 < N and 2 <= i1' <= i3; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] -> S_4[i0' = 1, i1', i2' = 1, i3', i4' = 0, i5' = 1, i6' = 1, i7' = 0, i8' = 0] : i1 >= 2 and i1 <= i3 < N and i1' > i1 and i1' <= i3' < N; S_4[i0 = 1, i1, i2 = 1, i3, i4 = 0, i5 = 1, i6 = 1, i7 = 0, i8 = 0] -> S_4[i0' = 1, i1' = i1, i2' = 1, i3', i4' = 0, i5' = 1, i6' = 1, i7' = 0, i8' = 0] : i1 >= 2 and i3 >= i1 and i3 < i3' < N; S_7[i0 = 1, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] -> S_1[i0' = 1, i1', i2' = 0, i3' = 0, i4' = 0, i5' = 0, i6' = 0, i7' = 0, i8' = 0] : i1 >= 0 and i1 <= i3 < N and i1' > i1 and 0 <= i1' < N; S_1[i0 = 1, i1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> S_7[i0' = 1, i1', i2' = 1, i3', i4' = 1, i5' = 0, i6' = 0, i7' = i3', i8' = 0] : i1 >= 0 and i1' >= i1 and i1' <= i3' < N }

#delta:
{ [i0 = 0, i1, i2 = 0, i3, i4 = 0, i5 = 0, i6 = 1, i7, i8 = 1] : i1 > 0 and i7 > 0 and i7 > -i1 + i3; [i0 = 0, i1, i2 = 0, i3 = i1, i4 = 0, i5, i6 = 2, i7, i8 = 0] : i1 > 0 and 0 <= i5 <= 1 and i7 >= 2 - i5; [i0 = 0, i1, i2 = 0, i3 = 0, i4 = 0, i5, i6 = 2, i7, i8 = 0] : 0 <= i5 <= 1 and i5 <= i1 and i7 >= i1 and i7 > 0; [i0 = 0, i1, i2 = 0, i3, i4 = 0, i5 = 0, i6 = 0, i7, i8 = 0] : i1 > 0; [i0 = 0, i1, i2 = 0, i3, i4 = 0, i5 = 0, i6 = -1, i7, i8 = -1] : i1 > 0 and i7 < -i1 + i3 and i7 < 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 0, i5 = 0, i6 = 1, i7, i8 = 1] : i3 >= 0 and i7 > i3; [i0 = 0, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] : i1 >= 0 and i3 >= i1; [i0 = 0, i1, i2 = -1, i3, i4 = -1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] : i1 > 0 and i3 <= 0; [i0 = 0, i1, i2 = 0, i3 = i1, i4 = 0, i5 = 0, i6 = 0, i7, i8 = 0] : i1 >= 0 and i7 > 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 0, i5 = 0, i6 = 0, i7, i8 = 0] : i3 > 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 0, i5 = 0, i6 = -1, i7, i8 = -1] : i3 > 0 and i7 < 0 }

#######################################################################

#######################################################################

#normalized loop (2):

#mapper:
[N] -> { S_11[] -> S_11[i0 = 2, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#domain:
[N] -> { S_11[i0 = 2, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#schedule map:
[N] -> { S_11[i0 = 2, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> [2, 2, 0, 0, 0, 0, 0, 0, 0] }

#writes:
[N] -> {  }

#reads:
[N] -> {  }

#dep_raw:
[N] -> {  }

#dep_waw:
[N] -> {  }

#dep_war:
[N] -> {  }

#relations:
[N] -> {  }

#delta:
[N] -> {  }

#######################################################################

#######################################################################

#normalized loop (3):

#mapper:
[N] -> { S_10[] -> S_10[i0 = 2, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#domain:
[N] -> { S_10[i0 = 2, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#schedule map:
[N] -> { S_10[i0 = 2, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> [2, 1, 0, 0, 0, 0, 0, 0, 0] }

#writes:
[N] -> {  }

#reads:
[N] -> {  }

#dep_raw:
[N] -> {  }

#dep_waw:
[N] -> {  }

#dep_war:
[N] -> {  }

#relations:
[N] -> {  }

#delta:
[N] -> {  }

#######################################################################

#######################################################################

#normalized loop (4):

#mapper:
[N] -> { S_9[] -> S_9[i0 = 2, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#domain:
[N] -> { S_9[i0 = 2, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#schedule map:
[N] -> { S_9[i0 = 2, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] -> [2, 0, 0, 0, 0, 0, 0, 0, 0] }

#writes:
[N] -> {  }

#reads:
[N] -> {  }

#dep_raw:
[N] -> {  }

#dep_waw:
[N] -> {  }

#dep_war:
[N] -> {  }

#relations:
[N] -> {  }

#delta:
[N] -> {  }

#######################################################################

#######################################################################

#normalized loop (0):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#dim [i4]: is order

#dim [i5]: is order

#dim [i6]: is order

#dim [i7]: is order

#dim [i8]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [N] -> { S_0[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [0, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i0, i1, i2, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_0[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [0, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3, i4, i5, i6, i7, i8] }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_0[] -> [0, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (1):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 1, i7 = 2, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 1, i7 = 1, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 1, i7 = 2, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 1, i7 = 1, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = -1, i7 = -3, i8 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = -1, i7 = -4, i8 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = -1, i7 = -2, i8 = -1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = -1, i7 = -3, i8 = -1] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 0, i5 = 1, i6 = 2, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 0, i5 = 1, i6 = 2, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 0, i5 = 0, i6 = 2, i7 = 3, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = 0, i3 = 2, i4 = 0, i5 = 0, i6 = 2, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 0, i5 = 1, i6 = 2, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 0, i5 = 1, i6 = 2, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 2, i7 = 3, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 2, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 1, i6 = 2, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 1, i6 = 2, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 2, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 2, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 2, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 2, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 1, i7 = 3, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 1, i7 = 2, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 1, i7 = 2, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 1, i7 = 1, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 1, i3 = 2, i4 = 1, i5 = 0, i6 = 0, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 1, i3 = 1, i4 = 1, i5 = 0, i6 = 0, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 1, i4 = 1, i5 = 0, i6 = 0, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 1, i3 = 0, i4 = 1, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -1, i3 = 0, i4 = -1, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 2, i2 = -1, i3 = -1, i4 = -1, i5 = 0, i6 = 0, i7 = -1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -1, i3 = 0, i4 = -1, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = -1, i3 = -1, i4 = -1, i5 = 0, i6 = 0, i7 = -1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 0, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 1, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 0, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = 0, i5 = 0, i6 = -1, i7 = -1, i8 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = 0, i5 = 0, i6 = -1, i7 = -2, i8 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = -1, i7 = -1, i8 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = -1, i7 = -2, i8 = -1] }

#delta:
{ [i0 = 0, i1, i2 = 0, i3, i4 = 0, i5 = 0, i6 = 1, i7, i8 = 1] : i1 > 0 and i7 > 0 and i7 > -i1 + i3; [i0 = 0, i1, i2 = 0, i3 = i1, i4 = 0, i5, i6 = 2, i7, i8 = 0] : i1 > 0 and 0 <= i5 <= 1 and i7 >= 2 - i5; [i0 = 0, i1, i2 = 0, i3 = 0, i4 = 0, i5, i6 = 2, i7, i8 = 0] : 0 <= i5 <= 1 and i5 <= i1 and i7 >= i1 and i7 > 0; [i0 = 0, i1, i2 = 0, i3, i4 = 0, i5 = 0, i6 = 0, i7, i8 = 0] : i1 > 0; [i0 = 0, i1, i2 = 0, i3, i4 = 0, i5 = 0, i6 = -1, i7, i8 = -1] : i1 > 0 and i7 < -i1 + i3 and i7 < 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 0, i5 = 0, i6 = 1, i7, i8 = 1] : i3 >= 0 and i7 > i3; [i0 = 0, i1, i2 = 1, i3, i4 = 1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] : i1 >= 0 and i3 >= i1; [i0 = 0, i1, i2 = -1, i3, i4 = -1, i5 = 0, i6 = 0, i7 = i3, i8 = 0] : i1 > 0 and i3 <= 0; [i0 = 0, i1, i2 = 0, i3 = i1, i4 = 0, i5 = 0, i6 = 0, i7, i8 = 0] : i1 >= 0 and i7 > 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 0, i5 = 0, i6 = 0, i7, i8 = 0] : i3 > 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 0, i5 = 0, i6 = -1, i7, i8 = -1] : i3 > 0 and i7 < 0 }

#dim [i0]: is order

#dim [i1]: is parameter, is positive

#dim [i2]: is order

#dim [i3]: is parameter, is negative, is positive

#dim [i4]: is order

#dim [i5]: is order

#dim [i6]: is order

#dim [i7]: is parameter, is negative, is positive

#dim [i8]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 1*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 + 1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -4*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 1*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 + 1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -4*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 1*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 + 1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -4*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 1*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 + 1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -4*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : a8 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 1*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 + 1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 = 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 = 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 = 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -4*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : a2 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 1*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 + 1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -4*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -9, a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0, a6 = 0, a7 = 0, a8 = 0, a9 = 0] }

#hyperplane: { [a1 = 0, a2 = 1, a3 = 0, a4 = 0, a5 = 0, a6 = 0, a7 = 0, a8 = 0, a9 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 1*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 + 1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -4*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : a8 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a2 >= 0  and a4 <= 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a2 != 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 3*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 1*a3 + 2*a4 + 1*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 2*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 1*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 1*a3 + 1*a4 + 1*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 1*a3 + 0*a4 + 1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + -1*a3 + 0*a4 + -1*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 2*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 >= 0 and 0*a1 + 1*a2 + -1*a3 + -1*a4 + -1*a5 + 0*a6 + 0*a7 + -1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 >= 0 and 0*a1 + 1*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -3*a8 + -1*a9 >= 0 and 0*a1 + 2*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + -1*a7 + -4*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane check: hyperplane is empty 

#result: false

#create hyperplanes stop

#create spaces start

#part: [N] -> { [i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [  h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : exists bh0 : 0 * i0 + 1 * i1 + 0 * i2 + 0 * i3 + 0 * i4 + 0 * i5 + 0 * i6 + 0 * i7 + 0 * i8 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#spaces mapper: [N] -> { [i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i1 <= 16h0 <= i1 }

#create spaces stop

#create tile scop start

#tile scop mapper: [N] -> { S_8[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_8[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i1 <= 16h0 <= i1; S_6[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_6[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i1 <= 16h0 <= i1; S_4[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_4[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i1 <= 16h0 <= i1; S_2[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_2[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i1 <= 16h0 <= i1; S_1[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_1[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i1 <= 16h0 <= i1; S_7[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_7[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i1 <= 16h0 <= i1; S_5[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_5[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i1 <= 16h0 <= i1; S_3[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_3[h0, ii0 = i0, ii1 = i1, ii2 = i2, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i1 <= 16h0 <= i1 }

#tile scop delta: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = 1, ii7, ii8 = 1] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii7 > 0 and ii7 > -ii1 + ii3; [h0, ii0 = 0, ii1, ii2 = 0, ii3 = 0, ii4 = 0, ii5, ii6 = 2, ii7, ii8 = 0] : 0 <= ii5 <= 1 and ii5 <= ii1 and ii5 <= 15 + 16h0 - ii1 and 14ii5 <= 15 - 16h0 + ii1 and ii7 >= ii1 and ii7 > 0; [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0; [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = -1, ii7, ii8 = -1] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii7 < -ii1 + ii3 and ii7 < 0; [h0, ii0 = 0, ii1, ii2 = 0, ii3 = ii1, ii4 = 0, ii5 = 1, ii6 = 2, ii7, ii8 = 0] : ii1 >= -1 + 16h0 and 0 < ii1 <= 14 + 16h0 and ii7 > 0; [h0, ii0 = 0, ii1, ii2 = 0, ii3 = ii1, ii4 = 0, ii5 = 0, ii6 = 2, ii7, ii8 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii7 >= 16h0 - ii1 and ii7 >= 2; [h0, ii0 = 0, ii1, ii2 = 1, ii3, ii4 = 1, ii5 = 0, ii6 = 0, ii7 = ii3, ii8 = 0] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 and ii3 >= 16h0 and ii3 >= ii1; [h0, ii0 = 0, ii1, ii2 = -1, ii3, ii4 = -1, ii5 = 0, ii6 = 0, ii7 = ii3, ii8 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii3 <= -16h0 + ii1 and ii3 <= 0; [h0, ii0 = 0, ii1, ii2 = 0, ii3 = ii1, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 and ii7 > 0; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = 1, ii7, ii8 = 1] : ii3 >= 0 and ii7 > ii3; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii3 > 0; [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = -1, ii7, ii8 = -1] : ii3 > 0 and ii7 < 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii3 > 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3 = ii1, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 and ii7 > 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = -1, ii7, ii8 = -1] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii7 < -ii1 + ii3 and ii7 < 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = 1, ii7, ii8 = 1] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii7 > 0 and ii7 > -ii1 + ii3 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = 1, ii7, ii8 = 1] : ii3 >= 0 and ii7 > ii3 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3 = ii1, ii4 = 0, ii5 = 0, ii6 = 2, ii7, ii8 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii7 >= 16h0 - ii1 and ii7 >= 2 }

#tile scop delta part: { [h0 = 0, ii0 = 0, ii1 = 0, ii2 = 0, ii3, ii4 = 0, ii5 = 0, ii6 = -1, ii7, ii8 = -1] : ii3 > 0 and ii7 < 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 1, ii3, ii4 = 1, ii5 = 0, ii6 = 0, ii7 = ii3, ii8 = 0] : ii1 >= -15 + 16h0 and 0 <= ii1 <= 15 + 16h0 and ii3 >= 16h0 and ii3 >= ii1 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3 = ii1, ii4 = 0, ii5 = 1, ii6 = 2, ii7, ii8 = 0] : ii1 >= -1 + 16h0 and 0 < ii1 <= 14 + 16h0 and ii7 > 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = -1, ii3, ii4 = -1, ii5 = 0, ii6 = 0, ii7 = ii3, ii8 = 0] : ii1 >= -15 + 16h0 and 0 < ii1 <= 15 + 16h0 and ii3 <= -16h0 + ii1 and ii3 <= 0 }

#tile scop delta part: { [h0, ii0 = 0, ii1, ii2 = 0, ii3 = 0, ii4 = 0, ii5, ii6 = 2, ii7, ii8 = 0] : 0 <= ii5 <= 1 and ii5 <= ii1 and ii5 <= 15 + 16h0 - ii1 and 14ii5 <= 15 - 16h0 + ii1 and ii7 >= ii1 and ii7 > 0 }

#tile delta: { [h0] : h0 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 2] }

#tile relatiions distance vector set: { [h0 = 1] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1] : exists c1 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and c0 = c1 and a1 != 0} * {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -1, a1 = 1] }

#wafefront hyperplane: { [a1 = 1] }

#calculate wafefront hyperplane stop

#######################################################################

#continue search for hyperplanes

#######################################################################

#dim info analyze start

#dim info analyze stop

#delta analyze start

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 2, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 2, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 0, i7 = 0, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 1, i7 = 3, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = 1, i7 = 2, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 1, i7 = 2, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 1, i7 = 1, i8 = 1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 2, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7 = 1, i8 = 0] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = 0, i5 = 0, i6 = -1, i7 = -1, i8 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 2, i4 = 0, i5 = 0, i6 = -1, i7 = -2, i8 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = -1, i7 = -1, i8 = -1] }

#distance vector set : { [i0 = 0, i1 = 0, i2 = 0, i3 = 1, i4 = 0, i5 = 0, i6 = -1, i7 = -2, i8 = -1] }

#delta:
{ [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 0, i5 = 0, i6 = 1, i7, i8 = 1] : i3 >= 0 and i7 > i3; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 0, i5 = 0, i6 = 0, i7, i8 = 0] : i3 > 0; [i0 = 0, i1 = 0, i2 = 0, i3, i4 = 0, i5 = 0, i6 = -1, i7, i8 = -1] : i3 > 0 and i7 < 0; [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 2, i7, i8 = 0] : i7 > 0; [i0 = 0, i1 = 0, i2 = 0, i3 = 0, i4 = 0, i5 = 0, i6 = 0, i7, i8 = 0] : i7 > 0 }

#dim [i0]: is wavefront order

#dim [i1]: is wavefront order

#dim [i2]: is wavefront order

#dim [i3]: is parameter, is positive

#dim [i4]: is order

#dim [i5]: is order

#dim [i6]: is order

#dim [i7]: is parameter, is negative, is positive

#dim [i8]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 }

#create tile equations stop

#create hyperplanes start

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim parallel free: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : a8 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 = 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane check: hyperplane is empty 

#result: false

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : a4 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -9, a1 = 0, a2 = 0, a3 = 0, a4 = 1, a5 = 0, a6 = 0, a7 = 0, a8 = 0, a9 = 0] }

#hyperplane: { [a1 = 0, a2 = 0, a3 = 0, a4 = 1, a5 = 0, a6 = 0, a7 = 0, a8 = 0, a9 = 0] }

#hyperplane check: first hyperplane 

#result: true

#hyperplane for dim: lexmin( {[d0 = 0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : a8 != 0 } * {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and a1 = 0  and a2 = 0  and a3 = 0  and a4 >= 0  and a8 <= 0  and a8 >= 0  and ( 1 = 0  or a4 != 0  or a8 != 0  )  and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 3*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 2*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 1*a7 + 1*a8 + 1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 2*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 2*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 0*a4 + 0*a5 + 0*a6 + 0*a7 + 1*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + 0*a7 + 0*a8 + 0*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -1*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 2*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 and 0*a1 + 0*a2 + 0*a3 + 1*a4 + 0*a5 + 0*a6 + -1*a7 + -2*a8 + -1*a9 >= 0 } )

#result: { [d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane: { [a1, a2, a3, a4, a5, a6, a7, a8, a9] : false }

#hyperplane check: hyperplane is empty 

#result: false

#create hyperplanes stop

#create spaces start

#part: [N] -> { [i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [  ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : exists bh0 : 0 * i0 + 0 * i1 + 0 * i2 + 1 * i3 + 0 * i4 + 0 * i5 + 0 * i6 + 0 * i7 + 0 * i8 - bh0 = 0 and 16 * h0 <= bh0 <= 16 * (h0 + 1) - 1 } 

#spaces mapper: [N] -> { [i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i3 <= 16h0 <= i3 }

#create spaces stop

#create tile scop start

#tile scop mapper: [N] -> { S_8[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_8[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i3 <= 16h0 <= i3; S_6[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_6[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i3 <= 16h0 <= i3; S_4[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_4[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i3 <= 16h0 <= i3; S_2[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_2[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i3 <= 16h0 <= i3; S_1[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_1[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i3 <= 16h0 <= i3; S_7[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_7[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i3 <= 16h0 <= i3; S_5[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_5[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i3 <= 16h0 <= i3; S_3[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> S_3[ii0 = i0, ii1 = i1, ii2 = i2, h0, ii3 = i3, ii4 = i4, ii5 = i5, ii6 = i6, ii7 = i7, ii8 = i8] : -15 + i3 <= 16h0 <= i3 }

#tile scop delta: { [ii0 = 0, ii1, ii2 = 0, h0, ii3, ii4 = 0, ii5 = 0, ii6 = 1, ii7, ii8 = 1] : ii1 > 0 and -15 + 16h0 <= ii3 <= 15 + 16h0 and ii7 > 0 and ii7 > -ii1 + ii3; [ii0 = 0, ii1, ii2 = 0, h0, ii3, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii1 > 0 and -15 + 16h0 <= ii3 <= 15 + 16h0; [ii0 = 0, ii1, ii2 = 0, h0, ii3, ii4 = 0, ii5 = 0, ii6 = -1, ii7, ii8 = -1] : ii1 > 0 and -15 + 16h0 <= ii3 <= 15 + 16h0 and ii7 < -ii1 + ii3 and ii7 < 0; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 0, ii5 = 0, ii6 = 1, ii7, ii8 = 1] : ii3 >= -15 + 16h0 and 0 <= ii3 <= 15 + 16h0 and ii7 > ii3; [ii0 = 0, ii1, ii2 = 0, h0, ii3 = ii1, ii4 = 0, ii5 = 1, ii6 = 2, ii7, ii8 = 0] : ii1 > 0 and -15 + ii1 <= 16h0 <= 15 + ii1 and ii7 > 0; [ii0 = 0, ii1, ii2 = 0, h0, ii3 = ii1, ii4 = 0, ii5 = 0, ii6 = 2, ii7, ii8 = 0] : ii1 > 0 and -15 + ii1 <= 16h0 <= 15 + ii1 and ii7 >= 2; [ii0 = 0, ii1, ii2 = 0, h0 = 0, ii3 = 0, ii4 = 0, ii5, ii6 = 2, ii7, ii8 = 0] : 0 <= ii5 <= 1 and ii5 <= ii1 and ii7 >= ii1 and ii7 > 0; [ii0 = 0, ii1, ii2 = 1, h0, ii3, ii4 = 1, ii5 = 0, ii6 = 0, ii7 = ii3, ii8 = 0] : ii1 >= 0 and ii3 >= ii1 and 16h0 <= ii3 <= 15 + 16h0; [ii0 = 0, ii1, ii2 = -1, h0, ii3, ii4 = -1, ii5 = 0, ii6 = 0, ii7 = ii3, ii8 = 0] : ii1 > 0 and -15 + 16h0 <= ii3 <= 0 and ii3 <= 16h0; [ii0 = 0, ii1, ii2 = 0, h0, ii3 = ii1, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii1 >= 0 and -15 + ii1 <= 16h0 <= 15 + ii1 and ii7 > 0; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0; [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 0, ii5 = 0, ii6 = -1, ii7, ii8 = -1] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 and ii7 < 0 }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6, ii7, ii8] : false }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0 = 0, ii3 = 0, ii4 = 0, ii5 = 0, ii6 = 0, ii7, ii8 = 0] : ii7 > 0 }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6, ii7, ii8] : false }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6, ii7, ii8] : false }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 0, ii5 = 0, ii6 = 1, ii7, ii8 = 1] : ii3 >= -15 + 16h0 and 0 <= ii3 <= 15 + 16h0 and ii7 > ii3 }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6, ii7, ii8] : false }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0, ii3, ii4 = 0, ii5 = 0, ii6 = -1, ii7, ii8 = -1] : ii3 >= -15 + 16h0 and 0 < ii3 <= 15 + 16h0 and ii7 < 0 }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6, ii7, ii8] : false }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6, ii7, ii8] : false }

#tile scop delta part: { [ii0, ii1, ii2, h0, ii3, ii4, ii5, ii6, ii7, ii8] : false }

#tile scop delta part: { [ii0 = 0, ii1 = 0, ii2 = 0, h0 = 0, ii3 = 0, ii4 = 0, ii5 = 0, ii6 = 2, ii7, ii8 = 0] : ii7 > 0 }

#tile delta: { [h0] : h0 > 0 }

#create tile scop stop

#tile delta analyze start

#tile relatiions distance vector set: { [h0 = 2] }

#tile relatiions distance vector set: { [h0 = 1] }

#tile delta analyze stop

#create wafefront equations start

#wafefront equations: {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 }

#create wafefront equations stop

#calculate wafefront hyperplane start

#wafefront hyperplane: lexmin( {[d0 = 0, b0, c0, a1] : exists c1 : ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and c0 = c1 and a1 != 0} * {[d0, b0, c0, a1] : exists b1 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and b0 > 0 and b0 = b1 and 2*a1 > 0 and 1*a1 > 0 } )

#result: { [d0 = 0, b0 = 1, c0 = -1, a1 = 1] }

#wafefront hyperplane: { [a1 = 1] }

#calculate wafefront hyperplane stop

#create wafefront schedule start

#part: [N] -> { S_8[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_1[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_4[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_3[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_2[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_7[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_6[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#part: [N] -> { S_5[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_1[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6, i7, i8]; S_8[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6, i7, i8]; S_4[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6, i7, i8]; S_3[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6, i7, i8]; S_2[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6, i7, i8]; S_7[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6, i7, i8]; S_5[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6, i7, i8]; S_6[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [1, i0, i1, i2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i3, i4, i5, i6, i7, i8] }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_6[gap, j, k] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 1, 2, k, 1] : gap <= j < N and -gap + j < k < j; S_3[gap, j] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 1, 0, 0, 0] : gap >= 2 and gap <= j < N; S_7[gap, j] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 1, 0, 0, j, 0] : gap >= 0 and gap <= j < N; S_5[gap, j, k] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 1, 2, k, 0] : gap <= j < N and -gap + j < k < j; S_1[gap] -> [1, 1, gap, 0, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 0, 0, 0, 0, 0, 0] : 0 <= gap < N; S_4[gap, j] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 1, 1, 0, 0] : gap >= 2 and gap <= j < N; S_8[gap] -> [1, 1, gap, 2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, N, 0, 0, 0, N, 0] : 0 <= gap < N; S_2[gap, j] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 0, 0, 0, 0] : 0 <= gap <= 1 and gap <= j < N }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (2):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#dim [i4]: is order

#dim [i5]: is order

#dim [i6]: is order

#dim [i7]: is order

#dim [i8]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [N] -> { S_11[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [2, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i0, i1, i2, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_11[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3, i4, i5, i6, i7, i8] }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_11[] -> [2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 2, 0, 0, 0, 0, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (3):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#dim [i4]: is order

#dim [i5]: is order

#dim [i6]: is order

#dim [i7]: is order

#dim [i8]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [N] -> { S_10[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [3, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i0, i1, i2, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_10[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [3, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3, i4, i5, i6, i7, i8] }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_10[] -> [3, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 1, 0, 0, 0, 0, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#normalized loop (4):

#loop tile start

#dim info analyze start

#dim info analyze stop

#delta analyze start

#delta:
[N] -> {  }

#dim [i0]: is order

#dim [i1]: is order

#dim [i2]: is order

#dim [i3]: is order

#dim [i4]: is order

#dim [i5]: is order

#dim [i6]: is order

#dim [i7]: is order

#dim [i8]: is order

#delta analyze stop

#create tile equations start

#tile equations: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and ( 1 = 0  )  }

#parallel free equation: {[d0, b0, c0, a1, a2, a3, a4, a5, a6, a7, a8, a9] : exists b1, c1, b2, c2, b3, c3, b4, c4, b5, c5, b6, c6, b7, c7, b8, c8, b9, c9 : ((b1 = a1 and a1 >= 0) or (b1 = -a1 and a1 < 0)) and ((c1 = -1 and a1 >= 0) or (c1 = 0 and a1 < 0)) and ((b2 = a2 and a2 >= 0) or (b2 = -a2 and a2 < 0)) and ((c2 = -1 and a2 >= 0) or (c2 = 0 and a2 < 0)) and ((b3 = a3 and a3 >= 0) or (b3 = -a3 and a3 < 0)) and ((c3 = -1 and a3 >= 0) or (c3 = 0 and a3 < 0)) and ((b4 = a4 and a4 >= 0) or (b4 = -a4 and a4 < 0)) and ((c4 = -1 and a4 >= 0) or (c4 = 0 and a4 < 0)) and ((b5 = a5 and a5 >= 0) or (b5 = -a5 and a5 < 0)) and ((c5 = -1 and a5 >= 0) or (c5 = 0 and a5 < 0)) and ((b6 = a6 and a6 >= 0) or (b6 = -a6 and a6 < 0)) and ((c6 = -1 and a6 >= 0) or (c6 = 0 and a6 < 0)) and ((b7 = a7 and a7 >= 0) or (b7 = -a7 and a7 < 0)) and ((c7 = -1 and a7 >= 0) or (c7 = 0 and a7 < 0)) and ((b8 = a8 and a8 >= 0) or (b8 = -a8 and a8 < 0)) and ((c8 = -1 and a8 >= 0) or (c8 = 0 and a8 < 0)) and ((b9 = a9 and a9 >= 0) or (b9 = -a9 and a9 < 0)) and ((c9 = -1 and a9 >= 0) or (c9 = 0 and a9 < 0)) and b0 > 0 and b0 = b1 + b2 + b3 + b4 + b5 + b6 + b7 + b8 + b9 and c0 = c1 + c2 + c3 + c4 + c5 + c6 + c7 + c8 + c9 and ( 1 = 0  )  }

#create tile equations stop

#create hyperplanes start

#create hyperplanes stop

#create wafefront schedule start

#part: [N] -> { S_9[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [4, w0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0, i0, i1, i2, i3, i4, i5, i6, i7, i8] : 1 = 1  and w0 = 0 and tw0 = 0 } 

#wafefront schedule: [N] -> { S_9[i0, i1, i2, i3, i4, i5, i6, i7, i8] -> [4, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, i0, i1, i2, i3, i4, i5, i6, i7, i8] }

#create wafefront schedule stop

#create code start

#wafefront code: [N] -> { S_9[] -> [4, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 0, 0, 0, 0, 0, 0, 0, 0] }

#create code stop

#loop tile stop

#######################################################################

#######################################################################

#global schedule:
[N] -> { S_5[gap, j, k] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 1, 2, k, 0] : gap <= j < N and -gap + j < k < j; S_6[gap, j, k] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 1, 2, k, 1] : gap <= j < N and -gap + j < k < j; S_3[gap, j] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 1, 0, 0, 0] : gap >= 2 and gap <= j < N; S_10[] -> [3, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 1, 0, 0, 0, 0, 0, 0, 0]; S_4[gap, j] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 1, 1, 0, 0] : gap >= 2 and gap <= j < N; S_8[gap] -> [1, 1, gap, 2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, N, 0, 0, 0, N, 0] : 0 <= gap < N; S_1[gap] -> [1, 1, gap, 0, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 0, 0, 0, 0, 0, 0] : 0 <= gap < N; S_2[gap, j] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 0, 0, 0, 0, 0] : 0 <= gap <= 1 and gap <= j < N; S_9[] -> [4, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 0, 0, 0, 0, 0, 0, 0, 0]; S_7[gap, j] -> [1, 1, gap, 1, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, j, 1, 0, 0, j, 0] : gap >= 0 and gap <= j < N; S_0[] -> [0, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; S_11[] -> [2, w0 = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, tw0 = 0, 2, 2, 0, 0, 0, 0, 0, 0, 0] }

#######################################################################

#######################################################################

#Does global schedule respects oryginal loop RaW deps? -> True

#Does global schedule respects oryginal loop WaW deps? -> True

#Does global schedule respects oryginal loop WaR deps? -> True

#######################################################################
